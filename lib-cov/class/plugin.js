/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['class/plugin.js']) {
  _$jscoverage['class/plugin.js'] = [];
  _$jscoverage['class/plugin.js'][1] = 0;
  _$jscoverage['class/plugin.js'][10] = 0;
  _$jscoverage['class/plugin.js'][11] = 0;
  _$jscoverage['class/plugin.js'][14] = 0;
  _$jscoverage['class/plugin.js'][29] = 0;
}
_$jscoverage['class/plugin.js'][1]++;
var aEach = require("../array").each, obj = require("../object"), emptyFn = require("../function").emptyFn, apply = obj.apply;
_$jscoverage['class/plugin.js'][10]++;
function Plugin(config) {
  _$jscoverage['class/plugin.js'][11]++;
  apply(this, config);
}
_$jscoverage['class/plugin.js'][14]++;
Plugin.prototype = {init: emptyFn, destroy: emptyFn};
_$jscoverage['class/plugin.js'][29]++;
module.exports = Plugin;
_$jscoverage['class/plugin.js'].source = ["var aEach = require('../array').each,","    obj = require('../object'),","    emptyFn = require('../function').emptyFn,","    apply = obj.apply;","","/**"," * @class Luc.Plugin"," * Simple class that is the default plugin type for Luc.PluginManager"," */","function Plugin(config) {","    apply(this, config);","}","","Plugin.prototype = {","    /**","     * @method","     * @param {Object} owner the owner instance","     * Simple hook to initialize the plugin","     * Defaults to Luc.emptyFn.","     */","    init: emptyFn,","    /**","     * @method Defaults to Luc.emptyFn.","     * Called when the plugin is being {@link Luc.PluginManager#destroyPlugin destroyed}.","     */","    destroy: emptyFn","};","","module.exports = Plugin;"];
