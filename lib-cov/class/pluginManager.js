/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['class/pluginManager.js']) {
  _$jscoverage['class/pluginManager.js'] = [];
  _$jscoverage['class/pluginManager.js'][1] = 0;
  _$jscoverage['class/pluginManager.js'][9] = 0;
  _$jscoverage['class/pluginManager.js'][10] = 0;
  _$jscoverage['class/pluginManager.js'][68] = 0;
  _$jscoverage['class/pluginManager.js'][78] = 0;
  _$jscoverage['class/pluginManager.js'][79] = 0;
  _$jscoverage['class/pluginManager.js'][80] = 0;
  _$jscoverage['class/pluginManager.js'][87] = 0;
  _$jscoverage['class/pluginManager.js'][88] = 0;
  _$jscoverage['class/pluginManager.js'][96] = 0;
  _$jscoverage['class/pluginManager.js'][97] = 0;
  _$jscoverage['class/pluginManager.js'][107] = 0;
  _$jscoverage['class/pluginManager.js'][109] = 0;
  _$jscoverage['class/pluginManager.js'][111] = 0;
  _$jscoverage['class/pluginManager.js'][113] = 0;
  _$jscoverage['class/pluginManager.js'][120] = 0;
  _$jscoverage['class/pluginManager.js'][122] = 0;
  _$jscoverage['class/pluginManager.js'][129] = 0;
  _$jscoverage['class/pluginManager.js'][134] = 0;
  _$jscoverage['class/pluginManager.js'][141] = 0;
  _$jscoverage['class/pluginManager.js'][142] = 0;
  _$jscoverage['class/pluginManager.js'][151] = 0;
  _$jscoverage['class/pluginManager.js'][152] = 0;
  _$jscoverage['class/pluginManager.js'][155] = 0;
  _$jscoverage['class/pluginManager.js'][159] = 0;
  _$jscoverage['class/pluginManager.js'][160] = 0;
  _$jscoverage['class/pluginManager.js'][171] = 0;
  _$jscoverage['class/pluginManager.js'][173] = 0;
  _$jscoverage['class/pluginManager.js'][174] = 0;
  _$jscoverage['class/pluginManager.js'][175] = 0;
  _$jscoverage['class/pluginManager.js'][178] = 0;
  _$jscoverage['class/pluginManager.js'][193] = 0;
  _$jscoverage['class/pluginManager.js'][194] = 0;
  _$jscoverage['class/pluginManager.js'][196] = 0;
  _$jscoverage['class/pluginManager.js'][200] = 0;
}
_$jscoverage['class/pluginManager.js'][1]++;
var Plugin = require("./plugin"), is = require("../is"), obj = require("../object"), arr = require("../array"), aEach = arr.each, mix = obj.mix, apply = obj.apply;
_$jscoverage['class/pluginManager.js'][9]++;
function PluginManager(config) {
  _$jscoverage['class/pluginManager.js'][10]++;
  this._init(config);
}
_$jscoverage['class/pluginManager.js'][68]++;
PluginManager.prototype = {defaultPlugin: Plugin, _init: (function (instanceValues) {
  _$jscoverage['class/pluginManager.js'][78]++;
  apply(this, instanceValues);
  _$jscoverage['class/pluginManager.js'][79]++;
  this.plugins = [];
  _$jscoverage['class/pluginManager.js'][80]++;
  this._createPlugins();
}), _createPlugins: (function () {
  _$jscoverage['class/pluginManager.js'][87]++;
  aEach(this._getPluginConfigFromInstance(), (function (pluginConfig) {
  _$jscoverage['class/pluginManager.js'][88]++;
  this.addPlugin(pluginConfig);
}), this);
}), _getPluginConfigFromInstance: (function () {
  _$jscoverage['class/pluginManager.js'][96]++;
  var config = this.instanceArgs[0] || {};
  _$jscoverage['class/pluginManager.js'][97]++;
  return config.plugins;
}), addPlugin: (function (pluginConfig) {
  _$jscoverage['class/pluginManager.js'][107]++;
  var pluginInstance = this._createPlugin(pluginConfig);
  _$jscoverage['class/pluginManager.js'][109]++;
  this._initPlugin(pluginInstance);
  _$jscoverage['class/pluginManager.js'][111]++;
  this.plugins.push(pluginInstance);
  _$jscoverage['class/pluginManager.js'][113]++;
  return pluginInstance;
}), _createPlugin: (function (config) {
  _$jscoverage['class/pluginManager.js'][120]++;
  config.owner = this.instance;
  _$jscoverage['class/pluginManager.js'][122]++;
  if (config.Constructor) {
    _$jscoverage['class/pluginManager.js'][129]++;
    return new config.Constructor(apply(config, {Constructor: undefined}));
  }
  _$jscoverage['class/pluginManager.js'][134]++;
  return new this.defaultPlugin(config);
}), _initPlugin: (function (plugin) {
  _$jscoverage['class/pluginManager.js'][141]++;
  if (is.isFunction(plugin.init)) {
    _$jscoverage['class/pluginManager.js'][142]++;
    plugin.init(this.instance);
  }
}), destroyAllPlugins: (function () {
  _$jscoverage['class/pluginManager.js'][151]++;
  this.plugins.forEach((function (plugin) {
  _$jscoverage['class/pluginManager.js'][152]++;
  this._destroyPlugin(plugin);
}), this);
  _$jscoverage['class/pluginManager.js'][155]++;
  this.plugins = [];
}), _destroyPlugin: (function (plugin) {
  _$jscoverage['class/pluginManager.js'][159]++;
  if (is.isFunction(plugin.destroy)) {
    _$jscoverage['class/pluginManager.js'][160]++;
    plugin.destroy(this.instance);
  }
}), destroyPlugin: (function (obj) {
  _$jscoverage['class/pluginManager.js'][171]++;
  var plugin = this.getPlugin(obj);
  _$jscoverage['class/pluginManager.js'][173]++;
  if (plugin) {
    _$jscoverage['class/pluginManager.js'][174]++;
    this._destroyPlugin(plugin);
    _$jscoverage['class/pluginManager.js'][175]++;
    arr.removeFirst(this.plugins, plugin, {type: "strict"});
  }
  _$jscoverage['class/pluginManager.js'][178]++;
  return plugin;
}), getPlugin: (function (obj) {
  _$jscoverage['class/pluginManager.js'][193]++;
  if (is.isFunction(obj)) {
    _$jscoverage['class/pluginManager.js'][194]++;
    return arr.findFirstInstanceOf(this.plugins, obj);
  }
  _$jscoverage['class/pluginManager.js'][196]++;
  return arr.findFirst(this.plugins, obj, {type: "loose"});
})};
_$jscoverage['class/pluginManager.js'][200]++;
module.exports = PluginManager;
_$jscoverage['class/pluginManager.js'].source = ["var Plugin = require('./plugin'),","    is = require('../is'),","    obj = require('../object'),","    arr = require('../array'),","    aEach = arr.each,","    mix = obj.mix,","    apply = obj.apply;","","function PluginManager(config) {","    this._init(config);","}","","/**"," * @protected"," * @class Luc.PluginManager"," * This class is used by Luc.compositionEnums#PluginManager to add its functionality "," * to any class.   By {@link Luc.compositionEnums#PluginManager default} it adds"," * all of these public methods to the instance.This class is designed to work as a composition, "," * it is exposed as not private so it can be extended if needed.   Check \"protected\" which"," * is a part of the Show v dropdown on the right to see the protected methods."," *","    function MyPlugin() {","        this.myCoolName = 'coo';","","        this.init = function() {","            console.log('im getting initted');","        }","        this.destroy = function() {","            console.log('MyPlugin instance being destroyed')","        }","    }","","    var C = Luc.define({","        $compositions: Luc.compositionEnums.PluginManager","    });","","    var c = new C({","        plugins: [{","                Constructor: MyPlugin,","                myCoolName: 'coo'","            }","        ]","    });","","    &gt;im getting initted","","    var plugInstance = c.addPlugin({","        destroy: function() {","            console.log('Im getting destroyed')","        }","    });","","    c.getPlugin(Luc.Plugin)","    &gt; Plugin {destroy: function, owner: MyClass, init: function, destroy: function}","","    c.getPlugin(MyPlugin)","    &gt; MyPlugin {myCoolName: \"coo\", init: function, destroy: function}","","    c.destroyAllPlugins()","","    &gt;MyPlugin instance being destroyed","    &gt;Im getting destroyed","","    c.getPlugin(MyPlugin)","    &gt;false",""," */","PluginManager.prototype = {","   /**","    * @cfg {Constructor} defaultPlugin","    */","    defaultPlugin: Plugin,","","    /**","     * @protected","     */","    _init: function(instanceValues) {","        apply(this, instanceValues);","        this.plugins = [];","        this._createPlugins();","    },","","    /**","     * @protected","     */","    _createPlugins: function() {","        aEach(this._getPluginConfigFromInstance(), function(pluginConfig) {","            this.addPlugin(pluginConfig);","        }, this);","    },","","    /**","     * @protected","     */","    _getPluginConfigFromInstance: function() {","        var config = this.instanceArgs[0] || {};","        return config.plugins;","    },","","    /**","     * Add a plugin to the instance and init the ","     * plugin.","     * @param  {Object} pluginConfig","     * @return {Object} the created plugin instance","     */","    addPlugin: function(pluginConfig) {","        var pluginInstance = this._createPlugin(pluginConfig);","","        this._initPlugin(pluginInstance);","","        this.plugins.push(pluginInstance);","","        return pluginInstance;","    },","","    /**","     * @protected","     */","    _createPlugin: function(config) {","        config.owner = this.instance;","","        if (config.Constructor) {","            //call the configed Constructor with the ","            //passed in config but take off the Constructor","            //config.","             ","            //The plugin Constructor ","            //should not need to know about itself","            return new config.Constructor(apply(config, {","                Constructor: undefined","            }));","        }","","        return new this.defaultPlugin(config);","    },","","    /**","     * @protected","     */","    _initPlugin: function(plugin) {","        if (is.isFunction(plugin.init)) {","            plugin.init(this.instance);","        }","    },","","    /**","     * Call destroy on all of the plugins","     * and remove them.","     */","    destroyAllPlugins: function() {","        this.plugins.forEach(function(plugin) {","            this._destroyPlugin(plugin);","        }, this);","","        this.plugins = [];","    },","","    _destroyPlugin: function(plugin) {","        if (is.isFunction(plugin.destroy)) {","            plugin.destroy(this.instance);","        }","    },","","    /**","     * Remove the plugin and if found destroy it.","     * @param  {Object/Constructor} object to use to match ","     * the plugin to remove.","     * @return {Object} the destroyed plugin.","     */","    destroyPlugin: function(obj) {","        var plugin = this.getPlugin(obj);","","        if(plugin) {","            this._destroyPlugin(plugin);","            arr.removeFirst(this.plugins, plugin, {type: 'strict'});","        }","","        return plugin;","    },","","    /**","     * Get a plugin instance.  A Constructor or an object can be used","     * to find a plugin.","     *","          c.addPlugin({a:1})","          c.getPlugin({a:1})","          &gt;Luc.Plugin({a:1})","","     * @param  {Object} obj ","     * @return {Object} the plugin instance if found.","     */","    getPlugin: function(obj) {","        if (is.isFunction(obj)) {","            return arr.findFirstInstanceOf(this.plugins, obj);","        }","        return arr.findFirst(this.plugins, obj, {type: 'loose'});","    }","};","","module.exports = PluginManager;"];
