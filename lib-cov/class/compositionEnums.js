/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['class/compositionEnums.js']) {
  _$jscoverage['class/compositionEnums.js'] = [];
  _$jscoverage['class/compositionEnums.js'][1] = 0;
  _$jscoverage['class/compositionEnums.js'][29] = 0;
  _$jscoverage['class/compositionEnums.js'][39] = 0;
  _$jscoverage['class/compositionEnums.js'][44] = 0;
  _$jscoverage['class/compositionEnums.js'][49] = 0;
}
_$jscoverage['class/compositionEnums.js'][1]++;
var EventEmitter = require("../events/eventEmitter"), PluginManager = require("./pluginManager");
_$jscoverage['class/compositionEnums.js'][29]++;
module.exports.EventEmitter = {Constructor: EventEmitter, name: "emitter", methods: "allMethods"};
_$jscoverage['class/compositionEnums.js'][39]++;
module.exports.PluginManager = {name: "plugins", initAfter: true, Constructor: PluginManager, create: (function () {
  _$jscoverage['class/compositionEnums.js'][44]++;
  var manager = new this.Constructor({instance: this.instance, instanceArgs: this.instanceArgs});
  _$jscoverage['class/compositionEnums.js'][49]++;
  return manager;
}), ignoreMethods: "defaultPlugin", methods: "publicMethods"};
_$jscoverage['class/compositionEnums.js'].source = ["var EventEmitter = require('../events/eventEmitter'),","    PluginManager = require('./pluginManager');","","/**"," * @class Luc.compositionEnums"," * Composition enums are just common config objects for Luc.Composition."," * Here is an example of a composition that uses EventEmitter but only"," * puts the emit method on the prototype."," *","    var C = Luc.define({","        $compositions: {","            defaults: Luc.compositionEnums.EventEmitter,","            methods: ['emit']","        }","    });","","    var c = new C();","","    typeof c.emit","    &gt;\"function\"","    typeof c.on","    \"undefined\""," * "," */","","/**"," * @property {Object} EventEmitter"," */","module.exports.EventEmitter = {","    Constructor: EventEmitter,","    name: 'emitter',","    methods: 'allMethods'","};","","","/**"," * @property {Object} PluginManager"," */","module.exports.PluginManager = {","    name: 'plugins',","    initAfter: true,","    Constructor: PluginManager,","    create: function() {","        var manager = new this.Constructor({","            instance: this.instance,","            instanceArgs: this.instanceArgs","        });","","        return manager;","    },","    ignoreMethods: 'defaultPlugin',","    methods: 'publicMethods'","};"];
