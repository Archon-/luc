/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['class/definer.js']) {
  _$jscoverage['class/definer.js'] = [];
  _$jscoverage['class/definer.js'][1] = 0;
  _$jscoverage['class/definer.js'][36] = 0;
  _$jscoverage['class/definer.js'][50] = 0;
  _$jscoverage['class/definer.js'][55] = 0;
  _$jscoverage['class/definer.js'][57] = 0;
  _$jscoverage['class/definer.js'][59] = 0;
  _$jscoverage['class/definer.js'][61] = 0;
  _$jscoverage['class/definer.js'][65] = 0;
  _$jscoverage['class/definer.js'][68] = 0;
  _$jscoverage['class/definer.js'][69] = 0;
  _$jscoverage['class/definer.js'][72] = 0;
  _$jscoverage['class/definer.js'][76] = 0;
  _$jscoverage['class/definer.js'][79] = 0;
  _$jscoverage['class/definer.js'][80] = 0;
  _$jscoverage['class/definer.js'][82] = 0;
  _$jscoverage['class/definer.js'][83] = 0;
  _$jscoverage['class/definer.js'][86] = 0;
  _$jscoverage['class/definer.js'][87] = 0;
  _$jscoverage['class/definer.js'][91] = 0;
  _$jscoverage['class/definer.js'][95] = 0;
  _$jscoverage['class/definer.js'][99] = 0;
  _$jscoverage['class/definer.js'][105] = 0;
  _$jscoverage['class/definer.js'][106] = 0;
  _$jscoverage['class/definer.js'][110] = 0;
  _$jscoverage['class/definer.js'][111] = 0;
  _$jscoverage['class/definer.js'][112] = 0;
  _$jscoverage['class/definer.js'][116] = 0;
  _$jscoverage['class/definer.js'][120] = 0;
  _$jscoverage['class/definer.js'][124] = 0;
  _$jscoverage['class/definer.js'][125] = 0;
  _$jscoverage['class/definer.js'][127] = 0;
  _$jscoverage['class/definer.js'][128] = 0;
  _$jscoverage['class/definer.js'][129] = 0;
  _$jscoverage['class/definer.js'][134] = 0;
  _$jscoverage['class/definer.js'][137] = 0;
  _$jscoverage['class/definer.js'][138] = 0;
  _$jscoverage['class/definer.js'][141] = 0;
  _$jscoverage['class/definer.js'][142] = 0;
  _$jscoverage['class/definer.js'][147] = 0;
  _$jscoverage['class/definer.js'][150] = 0;
  _$jscoverage['class/definer.js'][151] = 0;
  _$jscoverage['class/definer.js'][154] = 0;
  _$jscoverage['class/definer.js'][155] = 0;
  _$jscoverage['class/definer.js'][156] = 0;
  _$jscoverage['class/definer.js'][160] = 0;
  _$jscoverage['class/definer.js'][164] = 0;
  _$jscoverage['class/definer.js'][165] = 0;
  _$jscoverage['class/definer.js'][169] = 0;
  _$jscoverage['class/definer.js'][176] = 0;
  _$jscoverage['class/definer.js'][177] = 0;
  _$jscoverage['class/definer.js'][178] = 0;
  _$jscoverage['class/definer.js'][184] = 0;
  _$jscoverage['class/definer.js'][188] = 0;
  _$jscoverage['class/definer.js'][189] = 0;
  _$jscoverage['class/definer.js'][191] = 0;
  _$jscoverage['class/definer.js'][192] = 0;
  _$jscoverage['class/definer.js'][198] = 0;
  _$jscoverage['class/definer.js'][199] = 0;
  _$jscoverage['class/definer.js'][201] = 0;
  _$jscoverage['class/definer.js'][202] = 0;
  _$jscoverage['class/definer.js'][207] = 0;
  _$jscoverage['class/definer.js'][209] = 0;
  _$jscoverage['class/definer.js'][211] = 0;
  _$jscoverage['class/definer.js'][212] = 0;
  _$jscoverage['class/definer.js'][217] = 0;
  _$jscoverage['class/definer.js'][220] = 0;
  _$jscoverage['class/definer.js'][221] = 0;
  _$jscoverage['class/definer.js'][225] = 0;
  _$jscoverage['class/definer.js'][227] = 0;
  _$jscoverage['class/definer.js'][229] = 0;
  _$jscoverage['class/definer.js'][230] = 0;
  _$jscoverage['class/definer.js'][231] = 0;
  _$jscoverage['class/definer.js'][235] = 0;
  _$jscoverage['class/definer.js'][236] = 0;
  _$jscoverage['class/definer.js'][243] = 0;
  _$jscoverage['class/definer.js'][245] = 0;
  _$jscoverage['class/definer.js'][246] = 0;
  _$jscoverage['class/definer.js'][247] = 0;
  _$jscoverage['class/definer.js'][248] = 0;
  _$jscoverage['class/definer.js'][253] = 0;
  _$jscoverage['class/definer.js'][254] = 0;
  _$jscoverage['class/definer.js'][255] = 0;
  _$jscoverage['class/definer.js'][267] = 0;
  _$jscoverage['class/definer.js'][268] = 0;
  _$jscoverage['class/definer.js'][271] = 0;
  _$jscoverage['class/definer.js'][272] = 0;
  _$jscoverage['class/definer.js'][278] = 0;
  _$jscoverage['class/definer.js'][280] = 0;
  _$jscoverage['class/definer.js'][288] = 0;
  _$jscoverage['class/definer.js'][292] = 0;
  _$jscoverage['class/definer.js'][296] = 0;
  _$jscoverage['class/definer.js'][298] = 0;
  _$jscoverage['class/definer.js'][299] = 0;
  _$jscoverage['class/definer.js'][300] = 0;
  _$jscoverage['class/definer.js'][301] = 0;
  _$jscoverage['class/definer.js'][305] = 0;
  _$jscoverage['class/definer.js'][310] = 0;
  _$jscoverage['class/definer.js'][312] = 0;
}
_$jscoverage['class/definer.js'][1]++;
var Base = require("./base"), Composition = require("./composition"), obj = require("../object"), arrayFns = require("../array"), emptyFn = require("../function").emptyFn, is = require("../is"), aEach = arrayFns.each, apply = obj.apply, oEach = obj.each, oFilter = obj.filter, mix = obj.mix, arraySlice = Array.prototype.slice, ClassDefiner;
_$jscoverage['class/definer.js'][36]++;
ClassDefiner = {COMPOSITIONS_NAME: "$compositions", defaultType: Base, processorKeys: {$mixins: "_applyMixins", $statics: "_applyStatics", $compositions: "_applyComposerMethods", $super: "_applySuper"}, define: (function (opts) {
  _$jscoverage['class/definer.js'][50]++;
  var options = opts || {}, Super = options.$super || (options.$super === undefined? this.defaultType: false), Constructor;
  _$jscoverage['class/definer.js'][55]++;
  options.$super = Super;
  _$jscoverage['class/definer.js'][57]++;
  Constructor = this._createConstructor(options);
  _$jscoverage['class/definer.js'][59]++;
  this._processAfterCreate(Constructor, options);
  _$jscoverage['class/definer.js'][61]++;
  return Constructor;
}), _createConstructor: (function (options) {
  _$jscoverage['class/definer.js'][65]++;
  var superclass = options.$super, Constructor = this._createConstructorFn(options);
  _$jscoverage['class/definer.js'][68]++;
  if (superclass) {
    _$jscoverage['class/definer.js'][69]++;
    Constructor.prototype = Object.create(superclass.prototype);
  }
  _$jscoverage['class/definer.js'][72]++;
  return Constructor;
}), _createConstructorFn: (function (options) {
  _$jscoverage['class/definer.js'][76]++;
  var superclass = options.$super, Constructor;
  _$jscoverage['class/definer.js'][79]++;
  if (this._hasConstructorModifyingOptions(options)) {
    _$jscoverage['class/definer.js'][80]++;
    Constructor = this._createConstructorFromOptions(options);
  }
  else {
    _$jscoverage['class/definer.js'][82]++;
    if (! superclass) {
      _$jscoverage['class/definer.js'][83]++;
      Constructor = (function () {
});
    }
    else {
      _$jscoverage['class/definer.js'][86]++;
      Constructor = (function () {
  _$jscoverage['class/definer.js'][87]++;
  superclass.apply(this, arguments);
});
    }
  }
  _$jscoverage['class/definer.js'][91]++;
  return Constructor;
}), _hasConstructorModifyingOptions: (function (options) {
  _$jscoverage['class/definer.js'][95]++;
  return options.$compositions;
}), _createConstructorFromOptions: (function (options) {
  _$jscoverage['class/definer.js'][99]++;
  var superclass = options.$super, me = this, initBeforeSuperclass, initAfterSuperclass, init;
  _$jscoverage['class/definer.js'][105]++;
  if (! superclass) {
    _$jscoverage['class/definer.js'][106]++;
    init = this._createInitClassFn(options, {all: true});
    _$jscoverage['class/definer.js'][110]++;
    return (function () {
  _$jscoverage['class/definer.js'][111]++;
  var args = arraySlice.call(arguments);
  _$jscoverage['class/definer.js'][112]++;
  init.call(this, options, args);
});
  }
  _$jscoverage['class/definer.js'][116]++;
  initBeforeSuperclass = this._createInitClassFn(options, {before: true});
  _$jscoverage['class/definer.js'][120]++;
  initAfterSuperclass = this._createInitClassFn(options, {before: false});
  _$jscoverage['class/definer.js'][124]++;
  return (function () {
  _$jscoverage['class/definer.js'][125]++;
  var args = arraySlice.call(arguments);
  _$jscoverage['class/definer.js'][127]++;
  initBeforeSuperclass.call(this, options, args);
  _$jscoverage['class/definer.js'][128]++;
  superclass.apply(this, arguments);
  _$jscoverage['class/definer.js'][129]++;
  initAfterSuperclass.call(this, options, args);
});
}), _createInitClassFn: (function (options, config) {
  _$jscoverage['class/definer.js'][134]++;
  var me = this, compositions = this._filterCompositions(config, options.$compositions);
  _$jscoverage['class/definer.js'][137]++;
  if (compositions.length === 0) {
    _$jscoverage['class/definer.js'][138]++;
    return emptyFn;
  }
  _$jscoverage['class/definer.js'][141]++;
  return (function (options, instanceArgs) {
  _$jscoverage['class/definer.js'][142]++;
  me._initCompositions.call(this, compositions, instanceArgs);
});
}), _filterCompositions: (function (config, compositions) {
  _$jscoverage['class/definer.js'][147]++;
  var before = config.before, filtered = [];
  _$jscoverage['class/definer.js'][150]++;
  if (config.all) {
    _$jscoverage['class/definer.js'][151]++;
    return compositions;
  }
  _$jscoverage['class/definer.js'][154]++;
  aEach(compositions, (function (composition) {
  _$jscoverage['class/definer.js'][155]++;
  if (before && composition.initAfter !== true || (! before && composition.initAfter === true)) {
    _$jscoverage['class/definer.js'][156]++;
    filtered.push(composition);
  }
}));
  _$jscoverage['class/definer.js'][160]++;
  return filtered;
}), _processAfterCreate: (function ($class, options) {
  _$jscoverage['class/definer.js'][164]++;
  this._applyValuesToProto($class, options);
  _$jscoverage['class/definer.js'][165]++;
  this._handlePostProcessors($class, options);
}), _applyValuesToProto: (function ($class, options) {
  _$jscoverage['class/definer.js'][169]++;
  var proto = $class.prototype, values = apply({$class: $class}, options);
  _$jscoverage['class/definer.js'][176]++;
  oEach(values, (function (key, value) {
  _$jscoverage['class/definer.js'][177]++;
  if (! this._getProcessorKey(key)) {
    _$jscoverage['class/definer.js'][178]++;
    proto[key] = value;
  }
}), this);
}), _getProcessorKey: (function (key) {
  _$jscoverage['class/definer.js'][184]++;
  return this.processorKeys[key];
}), _handlePostProcessors: (function ($class, options) {
  _$jscoverage['class/definer.js'][188]++;
  oEach(options, (function (key, value) {
  _$jscoverage['class/definer.js'][189]++;
  var method = this._getProcessorKey(key);
  _$jscoverage['class/definer.js'][191]++;
  if (is.isFunction(this[method])) {
    _$jscoverage['class/definer.js'][192]++;
    this[method].call(this, $class, options[key]);
  }
}), this);
}), _applyMixins: (function ($class, mixins) {
  _$jscoverage['class/definer.js'][198]++;
  var proto = $class.prototype;
  _$jscoverage['class/definer.js'][199]++;
  aEach(mixins, (function (mixin) {
  _$jscoverage['class/definer.js'][201]++;
  var toMix = mixin.prototype || mixin;
  _$jscoverage['class/definer.js'][202]++;
  mix(proto, toMix);
}));
}), _applyStatics: (function ($class, statics) {
  _$jscoverage['class/definer.js'][207]++;
  var prototype = $class.prototype;
  _$jscoverage['class/definer.js'][209]++;
  apply($class, statics);
  _$jscoverage['class/definer.js'][211]++;
  if (prototype.getStaticValue === undefined) {
    _$jscoverage['class/definer.js'][212]++;
    prototype.getStaticValue = this.getStaticValue;
  }
}), _applyComposerMethods: (function ($class, compositions) {
  _$jscoverage['class/definer.js'][217]++;
  var prototype = $class.prototype, methodsToCompose;
  _$jscoverage['class/definer.js'][220]++;
  aEach(compositions, (function (compositionConfig) {
  _$jscoverage['class/definer.js'][221]++;
  var composition = new Composition(compositionConfig), name = composition.name, Constructor = composition.Constructor;
  _$jscoverage['class/definer.js'][225]++;
  composition.validate();
  _$jscoverage['class/definer.js'][227]++;
  methodsToCompose = composition.getMethodsToCompose();
  _$jscoverage['class/definer.js'][229]++;
  methodsToCompose.forEach((function (key) {
  _$jscoverage['class/definer.js'][230]++;
  if (prototype[key] === undefined) {
    _$jscoverage['class/definer.js'][231]++;
    prototype[key] = this._createComposerProtoFn(key, name);
  }
}), this);
  _$jscoverage['class/definer.js'][235]++;
  if (prototype.getComposition === undefined) {
    _$jscoverage['class/definer.js'][236]++;
    prototype.getComposition = this.getComposition;
  }
}), this);
}), _applySuper: (function ($class, $super) {
  _$jscoverage['class/definer.js'][243]++;
  var proto;
  _$jscoverage['class/definer.js'][245]++;
  if ($super) {
    _$jscoverage['class/definer.js'][246]++;
    proto = $class.prototype;
    _$jscoverage['class/definer.js'][247]++;
    proto.$super = $super;
    _$jscoverage['class/definer.js'][248]++;
    proto.$superclass = $super.prototype;
  }
}), _createComposerProtoFn: (function (methodName, compositionName) {
  _$jscoverage['class/definer.js'][253]++;
  return (function () {
  _$jscoverage['class/definer.js'][254]++;
  var comp = this[ClassDefiner.COMPOSITIONS_NAME][compositionName];
  _$jscoverage['class/definer.js'][255]++;
  return comp[methodName].apply(comp, arguments);
});
}), _initCompositions: (function (compositions, instanceArgs) {
  _$jscoverage['class/definer.js'][267]++;
  if (! this[ClassDefiner.COMPOSITIONS_NAME]) {
    _$jscoverage['class/definer.js'][268]++;
    this[ClassDefiner.COMPOSITIONS_NAME] = {};
  }
  _$jscoverage['class/definer.js'][271]++;
  aEach(compositions, (function (compositionConfig) {
  _$jscoverage['class/definer.js'][272]++;
  var config = apply({instance: this, instanceArgs: instanceArgs}, compositionConfig), composition;
  _$jscoverage['class/definer.js'][278]++;
  composition = new Composition(config);
  _$jscoverage['class/definer.js'][280]++;
  this[ClassDefiner.COMPOSITIONS_NAME][composition.name] = composition.getInstance();
}), this);
}), getComposition: (function (key) {
  _$jscoverage['class/definer.js'][288]++;
  return this[ClassDefiner.COMPOSITIONS_NAME][key];
}), getStaticValue: (function (key, $class) {
  _$jscoverage['class/definer.js'][292]++;
  var classToFindValue = $class || this.$class, $super, value;
  _$jscoverage['class/definer.js'][296]++;
  value = classToFindValue[key];
  _$jscoverage['class/definer.js'][298]++;
  if (value === undefined) {
    _$jscoverage['class/definer.js'][299]++;
    $super = classToFindValue.prototype.$super;
    _$jscoverage['class/definer.js'][300]++;
    if ($super) {
      _$jscoverage['class/definer.js'][301]++;
      return this.getStaticValue(key, $super);
    }
  }
  _$jscoverage['class/definer.js'][305]++;
  return value;
})};
_$jscoverage['class/definer.js'][310]++;
ClassDefiner.define = ClassDefiner.define.bind(ClassDefiner);
_$jscoverage['class/definer.js'][312]++;
module.exports = ClassDefiner;
_$jscoverage['class/definer.js'].source = ["var Base = require('./base'),","    Composition = require('./composition'),","    obj = require('../object'),","    arrayFns = require('../array'),","    emptyFn = require('../function').emptyFn,","    is = require('../is'),","    aEach = arrayFns.each,","    apply = obj.apply,","    oEach = obj.each,","    oFilter = obj.filter,","    mix = obj.mix,","    arraySlice = Array.prototype.slice,","    ClassDefiner;","","/**"," * @class Luc.ClassDefiner"," * @singleton"," *"," * Singleton that {@link Luc.define#define Luc.define} uses to define classes.  The defualt type can"," * be changed to any Constructor"," *","    function MyClass(){};","    Luc.ClassDefiner.defaultType = MyClass;","    var C = Luc.define();","    new C() instanceof Luc.Base","    &gt;false","    new C() instanceof MyClass","    &gt;true"," */","","/**"," * @cfg {Function} defaultType this can be changed to any Constructor.  Defaults"," * to Luc.Base."," */","","ClassDefiner = {","","    COMPOSITIONS_NAME: '$compositions',","","    defaultType: Base,","","    processorKeys: {","        $mixins: '_applyMixins',","        $statics: '_applyStatics',","        $compositions: '_applyComposerMethods',","        $super: '_applySuper'","    },","","    define: function(opts) {","        var options = opts || {},","            //if super is a falsy value besides undefined that means no superclass","            Super = options.$super || (options.$super === undefined ? this.defaultType : false),","            Constructor;","","        options.$super = Super;","","        Constructor = this._createConstructor(options);","","        this._processAfterCreate(Constructor, options);","","        return Constructor;","    },","","    _createConstructor: function(options) {","        var superclass = options.$super,","            Constructor = this._createConstructorFn(options);","","        if(superclass) {","            Constructor.prototype = Object.create(superclass.prototype);","        }","        ","        return Constructor;","    },","","    _createConstructorFn: function(options) {","        var superclass = options.$super,","            Constructor;","","        if (this._hasConstructorModifyingOptions(options)) {","            Constructor = this._createConstructorFromOptions(options);","        }","        else if(!superclass) {","            Constructor = function() {};","        }","        else {","            Constructor = function() {","                superclass.apply(this, arguments);","            };","        }","","        return Constructor;","    },","","    _hasConstructorModifyingOptions: function(options) {","        return options.$compositions;","    },","","    _createConstructorFromOptions: function(options) {","        var superclass = options.$super,","            me = this,","            initBeforeSuperclass,","            initAfterSuperclass,","            init;","","        if (!superclass) {","            init = this._createInitClassFn(options, {","                all: true","            });","","            return function() {","                var args = arraySlice.call(arguments);","                init.call(this, options, args);","            };","        }","","        initBeforeSuperclass = this._createInitClassFn(options, {","            before: true","        });","","        initAfterSuperclass = this._createInitClassFn(options, {","            before: false","        });","","        return function() {","            var args = arraySlice.call(arguments);","","            initBeforeSuperclass.call(this, options, args);","            superclass.apply(this, arguments);","            initAfterSuperclass.call(this, options, args);","        };","    },","","    _createInitClassFn: function(options, config) {","        var me = this,","            compositions = this._filterCompositions(config, options.$compositions);","","        if(compositions.length === 0) {","            return emptyFn;","        }","        ","        return function(options, instanceArgs) {","            me._initCompositions.call(this, compositions, instanceArgs);","        };","    },","","    _filterCompositions: function(config, compositions) {","        var before = config.before, ","            filtered = [];","","        if(config.all) {","            return compositions;","        }","","        aEach(compositions, function(composition) {","            if(before &amp;&amp; composition.initAfter !== true || (!before &amp;&amp; composition.initAfter === true)) {","                    filtered.push(composition);","            }","        });","","        return filtered;","    },","","    _processAfterCreate: function($class, options) {","        this._applyValuesToProto($class, options);","        this._handlePostProcessors($class, options);","    },","","    _applyValuesToProto: function($class, options) {","        var proto = $class.prototype,","            values = apply({","                $class: $class","            }, options);","","        //Don't put the define specific properties","        //on the prototype","        oEach(values, function(key, value) {","            if (!this._getProcessorKey(key)) {","                proto[key] = value;","            }","        }, this);","    },","","    _getProcessorKey: function(key) {","        return this.processorKeys[key];","    },","","    _handlePostProcessors: function($class, options) {","        oEach(options, function(key, value) {","            var method = this._getProcessorKey(key);","","            if (is.isFunction(this[method])) {","                this[method].call(this, $class, options[key]);","            }","        }, this);","    },","","    _applyMixins: function($class, mixins) {","        var proto = $class.prototype;","        aEach(mixins, function(mixin) {","            //accept Constructors or Objects","            var toMix = mixin.prototype || mixin;","            mix(proto, toMix);","        });","    },","","    _applyStatics: function($class, statics) {","        var prototype = $class.prototype;","","        apply($class, statics);","","        if(prototype.getStaticValue === undefined) {","            prototype.getStaticValue = this.getStaticValue;","        }","    },","","    _applyComposerMethods: function($class, compositions) {","        var prototype = $class.prototype,","            methodsToCompose;","","        aEach(compositions, function(compositionConfig) {","            var composition = new Composition(compositionConfig),","                name = composition.name,","                Constructor = composition.Constructor;","","            composition.validate();","","            methodsToCompose = composition.getMethodsToCompose();","","            methodsToCompose.forEach(function(key) {","                if (prototype[key] === undefined) {","                    prototype[key] = this._createComposerProtoFn(key, name);","                }","            }, this);","","            if(prototype.getComposition === undefined) {","                prototype.getComposition = this.getComposition;","            }","","        }, this);","    },","","    _applySuper: function($class, $super) {","        var proto;","        //super can be falsy to signify no superclass","        if ($super) {","            proto = $class.prototype;","            proto.$super = $super;","            proto.$superclass = $super.prototype;","        }","    },","","    _createComposerProtoFn: function(methodName, compositionName) {","        return function() {","            var comp = this[ClassDefiner.COMPOSITIONS_NAME][compositionName];","            return comp[methodName].apply(comp, arguments);","        };","    },","","    /**","     * @private","     * @ignore","     * options {Object} the composition config object","     * instanceArgs {Array} the arguments passed to the instance's","     * constructor.","     */","    _initCompositions: function(compositions, instanceArgs) {","        if(!this[ClassDefiner.COMPOSITIONS_NAME]) {","            this[ClassDefiner.COMPOSITIONS_NAME] = {};","        }","","        aEach(compositions, function(compositionConfig) {","            var config = apply({","                instance: this,","                instanceArgs: instanceArgs","            }, compositionConfig), ","            composition;","","            composition = new Composition(config);","","            this[ClassDefiner.COMPOSITIONS_NAME][composition.name] = composition.getInstance();","        }, this);","    },","","    //Methods that can get added to the prototype","    //they will be called in the context of the instance.","    //","    getComposition: function(key) {","        return this[ClassDefiner.COMPOSITIONS_NAME][key];","    },","","    getStaticValue: function (key, $class) {","        var classToFindValue = $class || this.$class,","            $super,","            value;","","        value = classToFindValue[key];","","        if(value === undefined) {","            $super = classToFindValue.prototype.$super;","            if($super) {","                return this.getStaticValue(key, $super);","            }","        }","","        return value;","    }","","};","","ClassDefiner.define = ClassDefiner.define.bind(ClassDefiner);","","module.exports = ClassDefiner;","","/**"," * @class  Luc.define"," * This is actually a function but has a decent amount of important options"," * so we are documenting it like it is a class.  Properties are things that will get"," * applied to instances of classes defined with {@link Luc.define#define define}.  None"," * are needed for {@link Luc.define#define defining} a class.  {@link Luc.define#define define}"," * just takes the passed in config and puts the properties on the prototype and returns"," * a Constructor."," *","","    var C = Luc.define({","        a: 1,","        doLog: true,","        logA: function() {","            if (this.doLog) {","                console.log(this.a);","            }","        }","    });","    var c = new C();","    c.logA();","    &gt;1","    c.a = 45;","    c.logA();","    &gt;45","    c.doLog = false;","    c.logA();","","    new C().logA()","    &gt;1",""," *"," * Check out the following configs to add functionality to a class without messing"," * up the inheritance chain.  All the configs have examples and documentation on "," * how to use them."," *"," * {@link Luc.define#$super super} &lt;br&gt;"," * {@link Luc.define#$compositions compositions} &lt;br&gt;"," * {@link Luc.define#$mixins mixins} &lt;br&gt;"," * {@link Luc.define#$statics statics} &lt;br&gt;"," * "," * "," */","","/**"," * @method  define"," * @param {Object} config config object used when creating the class.  Any property that"," * is not apart of the special configs will be applied to the prototype.  Check out"," * Luc.define for all the config options.   No configs are needed to define a class."," * "," * @return {Function} the defined class"," *","    var C = Luc.define({","        logA: function() {","            console.log(this.a)","        },","        a: 1","    });","    var c = new C();","    c.logA();","    &gt;1","","    c.a = 4;","    c.logA();","    &gt;4"," *"," *"," */","","/**"," * @property {Function} $class reference to the instances own constructor.  This"," * will get added to any class that is defined with Luc.define."," * ","    var C = Luc.define()","    var c = new C()","    c.$class === C","    &gt;true"," *"," * There are some really good use cases to have a reference to it's"," * own constructor.  &lt;br&gt; Add functionality to an instance in a simple"," * and generic way."," *","    var C = Luc.define({","        add: function(a,b) {","            return a + b;","        }","    });","","    //Luc.Base applies first ","    //arg to the instance","","    var c = new C({","        add: function(a,b,c) {","            return this.$class.prototype.add.call(this, a,b) + c;","        }","    });","","    c.add(1,2,3)","    &gt;6","    new C().add(1,2,3)","    &gt;3"," *"," * Or have a simple generic clone method :"," *","    var C = Luc.define({","        clone: function() {","            var myOwnProps = {};","            Luc.Object.each(this, function(key, value) {","                myOwnProps[key] = value;","            });","","            return new this.$class(myOwnProps);","        }","    });","","    var c = new C({a:1,b:2,c:3});","    c.d = 4;","    var clone = c.clone();","","    clone === c","    &gt;false","","    clone.a","    &gt;1","    clone.b","    &gt;2","    clone.c","    &gt;3","    clone.d","    &gt;4"," */","","/**"," * @property {Function} [$super] If $super is not false or null "," * the $super property will be added to every instance of the defined class,"," * $super is the Constructor passed in with the $super config or the {@link Luc.ClassDefiner#defaultType default}"," * ","    var C = Luc.define()","    var c = new C()","    //Luc.Base is the default ","    c.$super === Luc.Base","    &gt;true"," */","","/**"," * @property {Function} [$superclass] If $super is defined it"," * will be the prototype of $super.  It can be used to call a parent's"," * method"," * ","    function MyCoolClass() {}","    MyCoolClass.prototype.addNums = function(a,b) {","        return a + b;","    }","","    var MyOtherCoolClass = Luc.define({","        $super: MyCoolClass,","        addNums: function(a, b, c) {","            return this.$superclass.addNums.call(this, a, b) + c;","        }","    })","","    var m = new MyOtherCoolClass();","    m.addNums(1,2,3);","    &gt;6"," */","","/**"," * @property {Function} getStaticValue this method"," * will be added to instances that use the $statics"," * config."," *"," * "," * This should be used over this.$class.staticName to"," * get the value of static.  If the class gets inherited"," * from, this.$class will not be the same.  getStatic value"," * deals with this issue."," * ","    var A = Luc.define({","        $statics: {","            a: 1","            },","        getABetter: function() {","            return this.getStaticValue('a');","        },","        getA: function() {","            return this.$class.a;","        }","    });","","    var B = Luc.define({","        $super: A,","        $statics: {","            b: 2,","            c: 3","        }","    });","","    ","    var b = new B();","    b.getA();","    &gt;undefined","    b.getABetter();","    &gt;1",""," * @return {Object} the static value of the key"," */","","    ","/**"," * @property {Function} getComposition this method will be"," * to instances that use the $compositions config"," *"," * @param  {String} name the game of the composition to"," * get."," */","","","/**"," * @cfg {Object} $statics (optional) Add static properties or methods"," * to the class.  These properties/methods will not be able to be"," * directly modified by the instance so they are good for defining default"," * configs.  "," *","    var C = Luc.define({","        $statics: {","            number: 1","        }","    });","","    var c = new C();","    c.number","    &gt;undefined","    C.number","    &gt;1","    "," *"," * Bad things can happen if non primitives are placed on the "," * prototype and instance sharing is not wanted.  Using statics"," * prevent subclasses and instances from unknowingly modifying"," * all instances."," * ","    var C = Luc.define({","        cfg: {","            a: 1","        }","    });","","    var c = new C();","    c.cfg.a","    &gt;1","    c.cfg.a = 5","    new C().cfg.a","    &gt;5"," *"," */","","/**"," * @property {Function} [$superclass] If $super is defined it"," * will the prototype of $super.  It can be used to call parent's"," * method"," * ","    function MyCoolClass() {}","    MyCoolClass.prototype.addNums = function(a,b) {","        return a + b;","    }","","    var MyOtherCoolClass = Luc.define({","        $super: MyCoolClass,","        addNums: function(a, b, c) {","            return this.$superclass.addNums.call(this, a, b) + c;","        }","    })","","    var m = new MyOtherCoolClass();","    m.addNums(1,2,3);","    &gt;6"," */","","/**"," * @cfg {Object/Constructor/Object[]/Constructor[]} $mixins (optional)  Mixins are a way to add functionality"," * to a class that should not add state to the instance unknowingly.  Mixins can be either objects or Constructors."," *","    function Logger() {}","    Logger.prototype.log = function() {","        console.log(arguments)","    }","","    var C = Luc.define({","        $mixins: [Logger, {","            warn: function() {","                console.warn(arguments)","            }","        }]","    });","","    var c = new C();","","    c.log(1,2)","    &gt;[1,2]","","    c.warn(3,4)","    &gt;[3,4]"," *"," */","/**"," * @cfg {Constructor} $super (optional)  super for the defining class.  By Luc.Base"," * is the default if super is not passed in.  To define a class without a superclass"," * you can pass in false or null."," *","     function Counter() {","        this.count = 0;","     };","","     Counter.prototype = {","        getCount: function() {","            return this.count;","        },","        increaseCount: function() {","            this.count++;","        }","     }","","     var C = Luc.define({","        $super:Counter","    });","","    var c = new C()","","    c instanceof Counter","    &gt;true","    c.increaseCount();","    c.getCount();","    &gt;1","    c.count","    &gt;1"," *"," * Check out Luc.Base to see why we have it as the default."," * ","    var B = Luc.define({","        amIALucBase: function() {","            return this instanceof Luc.Base","        }","    })","    var b = new B();","    b.amIALucBase();","    &gt;true"," *"," * "," */","","","","/**"," * @cfg {Object/Object[]} $compositions (optional) config objects for "," * Luc.Composition.  Compositions are a great way to add behavior to a class"," * without extending it.  A $mixin can offer similar functionality but should"," * be stateless.  A Constructor and a name are needed for the config object"," * The methods property is optional here but it is saying take all of "," * Luc.EventEmitter's instance methods and make them instance methods for C."," * You can check out all of the config options by looking at Luc.Composition."," * ","        var C = Luc.define({","            $compositions: {","                Constructor: Luc.EventEmitter,","                name: 'emitter',","                methods: 'allMethods'","            }","        });","","        var c = new C();","","        c.on('hey', function() {","            console.log(arguments);","        });","","        c.emit('hey', 1,2,3, 'a');","        &gt;[1, 2, 3, \"a\"]","        c instanceof Luc.EventEmitter","        &gt;false","        c._events","        &gt;undefined"," *"," * Luc.EventEmitter is preferred as a composition over a mixin because"," * it adds a state \"_events\" to the this instance when on is called.  It"," * also shouldn't have to know that it may be instantiated alone or mixed into classes"," * so the initing of state is not done in the constructor like it probably should."," * It is not terrible practice by any means but it is not good to have a standalone class"," * that knows that it may be mixin.  Even worse than that would be a mixin that needs"," * to be inited by the defining class.  Encapsulating logic in a class"," * and using it anywhere seamlessly is where compositions shine. Luc comes with two common "," * {@link Luc#compositionEnums enums} that we expect will be used often."," * "," * &lt;br&gt;"," * Here is an example of a simple composition see how the functionality "," * is added but we are not inheriting and this.count is"," * undefined."," *","         function Counter() {","            this.count = 0;","         };","","         Counter.prototype = {","            getCount: function() {","                return this.count;","            },","            increaseCount: function() {","                this.count++;","            }","         }","","         var C = Luc.define({","                $compositions: {","                    name: 'counter',","                    Constructor: Counter,","                    methods: 'allMethods'","                }","        });","","        var c = new C()","","        c.increaseCount();","        c.increaseCount();","        c.increaseCount();","        c.getCount();","        &gt;3","        c.count","        &gt;undefined"," *"," * Luc comes with two default composition objects Luc.compositionEnums.PluginManager"," * and Luc.compositionEnums.EventEmitter."," * "," * Here is the plugin manager enum, keep in mind that this"," * functionality can be added to any class, not just ones defined with "," * Luc.define.  Check out Luc.PluginManager to see all of the public "," * methods that gets added to the defined instance.","   ","    function MyClass() {};","","    function MyPlugin() {","        this.myCoolName = 'coo';","","        this.init = function() {","            console.log('im getting initted');","        }","        this.destroy = function() {","            console.log('MyPlugin instance being destroyed')","        }","    }","","    var C = Luc.define({","        $super: MyClass,","        $compositions: Luc.compositionEnums.PluginManager","    });","","    var c = new C({","        plugins: [{","                Constructor: MyPlugin,","                myCoolName: 'coo'","            }","        ]","    });","    &gt;im getting initted","    c instanceof MyClass","    &gt;true","","    c.getPlugin({myCoolName: 'coo'}) instanceof MyPlugin","    &gt; true","","","    c.a = 1;","    //This will be the default Luc.Plugin","    c.addPlugin({","        init: function(owner) {","            console.log(owner.a)","        },","        destroy: function() {","            console.log('Im getting destroyed')","        }","    });","","    &gt;1","","    c.destroyAllPlugins();","    &gt;MyPlugin instance being destroyed","    &gt;I'm getting destroyed.","","    c.getPlugin({myCoolName: 'coo'})","    &gt;false"," *"," * You can see that it can add plugin like behavior to any defining"," * class with Luc.PluginManger which is less than 75 SLOC."," */"];
