/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['function.js']) {
  _$jscoverage['function.js'] = [];
  _$jscoverage['function.js'][1] = 0;
  _$jscoverage['function.js'][3] = 0;
  _$jscoverage['function.js'][12] = 0;
  _$jscoverage['function.js'][13] = 0;
  _$jscoverage['function.js'][17] = 0;
  _$jscoverage['function.js'][18] = 0;
  _$jscoverage['function.js'][21] = 0;
  _$jscoverage['function.js'][22] = 0;
  _$jscoverage['function.js'][23] = 0;
  _$jscoverage['function.js'][25] = 0;
  _$jscoverage['function.js'][28] = 0;
  _$jscoverage['function.js'][35] = 0;
  _$jscoverage['function.js'][42] = 0;
  _$jscoverage['function.js'][43] = 0;
  _$jscoverage['function.js'][108] = 0;
  _$jscoverage['function.js'][109] = 0;
  _$jscoverage['function.js'][111] = 0;
  _$jscoverage['function.js'][112] = 0;
  _$jscoverage['function.js'][116] = 0;
  _$jscoverage['function.js'][117] = 0;
  _$jscoverage['function.js'][118] = 0;
  _$jscoverage['function.js'][119] = 0;
  _$jscoverage['function.js'][121] = 0;
  _$jscoverage['function.js'][122] = 0;
  _$jscoverage['function.js'][125] = 0;
  _$jscoverage['function.js'][128] = 0;
  _$jscoverage['function.js'][161] = 0;
  _$jscoverage['function.js'][162] = 0;
  _$jscoverage['function.js'][164] = 0;
  _$jscoverage['function.js'][165] = 0;
  _$jscoverage['function.js'][168] = 0;
  _$jscoverage['function.js'][169] = 0;
  _$jscoverage['function.js'][172] = 0;
  _$jscoverage['function.js'][214] = 0;
  _$jscoverage['function.js'][215] = 0;
  _$jscoverage['function.js'][217] = 0;
  _$jscoverage['function.js'][218] = 0;
  _$jscoverage['function.js'][221] = 0;
  _$jscoverage['function.js'][222] = 0;
  _$jscoverage['function.js'][224] = 0;
  _$jscoverage['function.js'][227] = 0;
  _$jscoverage['function.js'][258] = 0;
  _$jscoverage['function.js'][259] = 0;
  _$jscoverage['function.js'][261] = 0;
  _$jscoverage['function.js'][262] = 0;
  _$jscoverage['function.js'][265] = 0;
  _$jscoverage['function.js'][266] = 0;
  _$jscoverage['function.js'][267] = 0;
  _$jscoverage['function.js'][269] = 0;
  _$jscoverage['function.js'][273] = 0;
  _$jscoverage['function.js'][311] = 0;
  _$jscoverage['function.js'][312] = 0;
  _$jscoverage['function.js'][315] = 0;
  _$jscoverage['function.js'][316] = 0;
  _$jscoverage['function.js'][319] = 0;
  _$jscoverage['function.js'][320] = 0;
  _$jscoverage['function.js'][322] = 0;
  _$jscoverage['function.js'][323] = 0;
  _$jscoverage['function.js'][326] = 0;
  _$jscoverage['function.js'][327] = 0;
  _$jscoverage['function.js'][328] = 0;
  _$jscoverage['function.js'][346] = 0;
  _$jscoverage['function.js'][347] = 0;
  _$jscoverage['function.js'][349] = 0;
  _$jscoverage['function.js'][350] = 0;
  _$jscoverage['function.js'][353] = 0;
  _$jscoverage['function.js'][354] = 0;
  _$jscoverage['function.js'][356] = 0;
  _$jscoverage['function.js'][357] = 0;
}
_$jscoverage['function.js'][1]++;
var is = require("./is"), aInsert = require("./array").insert;
_$jscoverage['function.js'][3]++;
aEach = require("./array").each;
_$jscoverage['function.js'][12]++;
function _augmentArgs(config, callArgs) {
  _$jscoverage['function.js'][13]++;
  var configArgs = config.args, index = config.index, argsArray;
  _$jscoverage['function.js'][17]++;
  if (! configArgs) {
    _$jscoverage['function.js'][18]++;
    return callArgs;
  }
  _$jscoverage['function.js'][21]++;
  if (index === true || is.isNumber(index)) {
    _$jscoverage['function.js'][22]++;
    if (config.argumentsFirst === false) {
      _$jscoverage['function.js'][23]++;
      return aInsert(configArgs, callArgs, index);
    }
    _$jscoverage['function.js'][25]++;
    return aInsert(callArgs, configArgs, index);
  }
  _$jscoverage['function.js'][28]++;
  return configArgs;
}
_$jscoverage['function.js'][35]++;
exports.emptyFn = (function () {
});
_$jscoverage['function.js'][42]++;
exports.abstractFn = (function () {
  _$jscoverage['function.js'][43]++;
  throw new Error("abstractFn must be implemented");
});
_$jscoverage['function.js'][108]++;
exports.createAugmenter = (function (fn, config) {
  _$jscoverage['function.js'][109]++;
  var thisArg = config.thisArg;
  _$jscoverage['function.js'][111]++;
  return (function () {
  _$jscoverage['function.js'][112]++;
  return fn.apply(thisArg || this, _augmentArgs(config, arguments));
});
});
_$jscoverage['function.js'][116]++;
function _initSequenceFunctions(fns, config) {
  _$jscoverage['function.js'][117]++;
  var toRun = [];
  _$jscoverage['function.js'][118]++;
  aEach(fns, (function (f) {
  _$jscoverage['function.js'][119]++;
  var fn = f;
  _$jscoverage['function.js'][121]++;
  if (config) {
    _$jscoverage['function.js'][122]++;
    fn = exports.createAugmenter(f, config);
  }
  _$jscoverage['function.js'][125]++;
  toRun.push(fn);
}));
  _$jscoverage['function.js'][128]++;
  return toRun;
}
_$jscoverage['function.js'][161]++;
exports.createSequence = (function (fns, config) {
  _$jscoverage['function.js'][162]++;
  var functions = _initSequenceFunctions(fns, config);
  _$jscoverage['function.js'][164]++;
  return (function () {
  _$jscoverage['function.js'][165]++;
  var i = 0, len = functions.length;
  _$jscoverage['function.js'][168]++;
  for (; i < len - 1; ++i) {
    _$jscoverage['function.js'][169]++;
    functions[i].apply(this, arguments);
}
  _$jscoverage['function.js'][172]++;
  return functions[len - 1].apply(this, arguments);
});
});
_$jscoverage['function.js'][214]++;
exports.createSequenceIf = (function (fns, config) {
  _$jscoverage['function.js'][215]++;
  var functions = _initSequenceFunctions(fns, config);
  _$jscoverage['function.js'][217]++;
  return (function () {
  _$jscoverage['function.js'][218]++;
  var value, args = arguments;
  _$jscoverage['function.js'][221]++;
  functions.some((function (fn) {
  _$jscoverage['function.js'][222]++;
  value = fn.apply(this, args);
  _$jscoverage['function.js'][224]++;
  return value === false;
}), this);
  _$jscoverage['function.js'][227]++;
  return value;
});
});
_$jscoverage['function.js'][258]++;
exports.createRelayer = (function (fns, config) {
  _$jscoverage['function.js'][259]++;
  var functions = _initSequenceFunctions(fns, config);
  _$jscoverage['function.js'][261]++;
  return (function () {
  _$jscoverage['function.js'][262]++;
  var value, args = arguments;
  _$jscoverage['function.js'][265]++;
  functions.forEach((function (fn, index) {
  _$jscoverage['function.js'][266]++;
  if (index === 0) {
    _$jscoverage['function.js'][267]++;
    value = fn.apply(this, args);
  }
  else {
    _$jscoverage['function.js'][269]++;
    value = fn.apply(this, [value]);
  }
}), this);
  _$jscoverage['function.js'][273]++;
  return value;
});
});
_$jscoverage['function.js'][311]++;
exports.createThrottled = (function (f, millis, config) {
  _$jscoverage['function.js'][312]++;
  var fn = config? exports.createAugmenter(f, config): f, timeOutId = false;
  _$jscoverage['function.js'][315]++;
  if (! millis) {
    _$jscoverage['function.js'][316]++;
    return fn;
  }
  _$jscoverage['function.js'][319]++;
  return (function () {
  _$jscoverage['function.js'][320]++;
  var args = arguments;
  _$jscoverage['function.js'][322]++;
  if (timeOutId) {
    _$jscoverage['function.js'][323]++;
    clearTimeout(timeOutId);
  }
  _$jscoverage['function.js'][326]++;
  timeOutId = setTimeout((function () {
  _$jscoverage['function.js'][327]++;
  timeOutId = false;
  _$jscoverage['function.js'][328]++;
  fn.apply(this, args);
}), millis);
});
});
_$jscoverage['function.js'][346]++;
exports.createDeferred = (function (f, millis, config) {
  _$jscoverage['function.js'][347]++;
  var fn = config? exports.createAugmenter(f, config): f;
  _$jscoverage['function.js'][349]++;
  if (! millis) {
    _$jscoverage['function.js'][350]++;
    return fn;
  }
  _$jscoverage['function.js'][353]++;
  return (function () {
  _$jscoverage['function.js'][354]++;
  var args = arguments;
  _$jscoverage['function.js'][356]++;
  setTimeout((function () {
  _$jscoverage['function.js'][357]++;
  fn.apply(this, args);
}), millis);
});
});
_$jscoverage['function.js'].source = ["var is = require('./is'),","    aInsert = require('./array').insert;","    aEach = require('./array').each;","","/**"," * @class Luc.Function"," * Package for function methods.  Most of them follow the same api:"," * function or function[], relevant args ... with an optional config"," * to Luc.Function.createAutmenter as the last argument."," */","","function _augmentArgs(config, callArgs) {","    var configArgs = config.args,","        index = config.index,","        argsArray;","","    if (!configArgs) {","        return callArgs;","    }","","    if(index === true || is.isNumber(index)) {","        if(config.argumentsFirst === false) {","            return aInsert(configArgs, callArgs, index);","        }","        return aInsert(callArgs, configArgs, index);","    }","","    return configArgs;","}","","/**"," * A reusable empty function"," * @return {Function}"," */","exports.emptyFn = function() {};","","/**"," * A function that throws an error when called."," * Useful when defining abstract like classes"," * @return {Function}"," */","exports.abstractFn = function() {","    throw new Error('abstractFn must be implemented');","};","","/**"," * Augment the passed in function's thisArg and or arguments object "," * based on the passed in config."," * "," * @param  {Function} fn the function to call"," * @param  {Object} config"," * "," * @param {Object} [config.thisArg] the thisArg for the function being executed."," * If this is the only property on your config object the preferred way would"," * be just to use Function.bind"," * "," * @param {Array} [config.args] the arguments used for the function being executed."," * This will replace the functions call args if index is not a number or "," * true."," * "," * @param {Number/True} [config.index] By default the the configured arguments"," * will be inserted into the functions passed in call arguments.  If index is true"," * append the args together if it is a number insert it at the passed in index."," * "," * @param {Array} [config.argumentsFirst] pass in false to "," * augment the configured args first with Luc.Array.insert.  Defaults"," * to true","     ","     function fn() {","        console.log(this)","        console.log(arguments)","    }","    ","    //Luc.Array.insert([4], [1,2,3], 0)","    Luc.Function.createAugmenter(fn, {","        thisArg: {configedThisArg: true},","        args: [1,2,3],","        index:0","    })(4)","","    &gt;Object {configedThisArg: true}","    &gt;[1, 2, 3, 4]","","    //Luc.Array.insert([1,2,3], [4], 0)","    Luc.Function.createAugmenter(fn, {","        thisArg: {configedThisArg: true},","        args: [1,2,3],","        index:0,","        argumentsFirst:false","    })(4)","","    &gt;Object {configedThisArg: true}","    &gt;[4, 1, 2, 3]","","    Luc.Array.insert([4], [1,2,3],  true)","    var f = Luc.Function.createAugmenter(fn, {","        args: [1,2,3],","        index: true","    });","","    f.apply({config: false}, [4])","","    &gt;Object {config: false}","    &gt;[4, 1, 2, 3]",""," * @return {Function} the augmented function."," */","exports.createAugmenter = function(fn, config) {","    var thisArg = config.thisArg;","","    return function() {","        return fn.apply(thisArg || this, _augmentArgs(config, arguments));","    };","};","","function _initSequenceFunctions(fns, config) {","    var toRun = [];","    aEach(fns, function(f) {","        var fn = f;","","        if (config) {","            fn = exports.createAugmenter(f, config);","        }","","        toRun.push(fn);","    });","","    return toRun;","}","","/**"," * Return a function that runs the passed in functions"," * and returns the result of the last function called."," * "," * @param  {Function[]} fns "," * @param  {Object} [config] Config object"," * for Luc.Function.createAugmenter.  If defined all of the functions"," * will get created with the passed in config;"," *","    Luc.Function.createSequence([","        function() {","            console.log(1)","        },","        function() {","            console.log(2)","        },","        function() {","            console.log(3)","            console.log('finished logging')","            return 4;","        }","    ])()","    &gt;1","    &gt;2","    &gt;3","    &gt;finished logging","    &gt;4"," * "," * @return {Function}"," */","exports.createSequence = function(fns, config) {","    var functions = _initSequenceFunctions(fns, config);","","    return function() {","        var i = 0,","            len = functions.length;","","        for(;i &lt; len -1; ++i) {","            functions[i].apply(this, arguments);","        }","","        return functions[len -1 ].apply(this, arguments);","    };","};","","/**"," * Return a function that runs the passed in functions"," * if one of the functions results false the rest of the "," * functions won't run and false will be returned."," *"," * If no false is returned the value of the last function return will be returned"," * ","    Luc.Function.createSequenceIf([","        function() {","            console.log(1)","        },","        function() {","            console.log(2)","        },","        function() {","            console.log(3)","            console.log('finished logging')","            return 4;","        }, function() {","            return false;","        }, function() {","            console.log('i cant log')","        }","    ])()","","    &gt;1","    &gt;2","    &gt;3","    &gt;finished logging","    &gt;false"," *"," * "," * @param  {Function[]} fns "," * @param  {Object} [config] Config object"," * for Luc.Function.createAugmenter.  If defined all of the functions"," * will get created with the passed in config;"," * @return {Function}"," */","exports.createSequenceIf = function(fns, config) {","    var functions = _initSequenceFunctions(fns, config);","","    return function() {","        var value,","            args = arguments;","","        functions.some(function(fn){","            value = fn.apply(this, args);","","            return value === false;","        }, this);","","        return value;","    };","};","","/**"," * Return a functions that runs the passed in functions"," * the result of each function will be the the call args "," * for the next function.  The value of the last function "," * return will be returned."," * ","     ","     Luc.Function.createRelayer([","        function(str) {","            return str + 'b'","        },","        function(str) {","            return str + 'c'","        },","        function(str) {","            return str + 'd'","        }","    ])('a')","","    &gt;\"abcd\"",""," * @param  {Function[]} fns "," * @param  {Object} [config] Config object"," * for Luc.Function.createAugmenter.  If defined all of the functions"," * will get created with the passed in config;"," * @return {Function}"," */","exports.createRelayer = function(fns, config) {","    var functions = _initSequenceFunctions(fns, config);","","    return function() {","        var value,","            args = arguments;","","        functions.forEach(function(fn, index) {","            if (index === 0) {","                value = fn.apply(this, args);","            } else {","                value = fn.apply(this, [value]);","            }","        }, this);","","        return value;","    };","};","","/**"," * Create a throttled function from the passed in function"," * that will only get called once the passed number of miliseconds"," * have been exceeded."," * ","    var logArgs  = function() {","        console.log(arguments)","    };","","    var a = Luc.Function.createThrottled(logArgs, 1);","","    for(var i = 0; i &lt; 100; ++i) {","        a(1,2,3);","    }","","    setTimeout(function() {","        a(1)","    }, 100)","    setTimeout(function() {","        a(2)","    }, 400)","","    &gt;[1, 2, 3]","    &gt;[1]","    &gt;[2]"," * "," * @param  {Function} fn"," * @param  {Number} millis Number of milliseconds to"," * throttle the function."," * @param  {Object} [config] Config object"," * for Luc.Function.createAugmenter.  If defined all of the functions"," * will get created with the passed in config;"," * @return {Function}"," */","exports.createThrottled = function(f, millis, config) {","    var fn = config ? exports.createAugmenter(f, config) : f,","        timeOutId = false;","","    if(!millis) {","        return fn;","    }","","    return function() {","        var args = arguments;","","        if(timeOutId) {","            clearTimeout(timeOutId);","        }","","        timeOutId = setTimeout(function() {","            timeOutId = false;","            fn.apply(this, args);","        }, millis);","    };","};","","/**"," * Defer a function's execution for the passed in"," * milliseconds."," * "," * @param  {Function} fn"," * @param  {Number} millis Number of milliseconds to"," * defer"," * @param  {Object} [config] Config object"," * for Luc.Function.createAugmenter.  If defined all of the functions"," * will get created with the passed in config;"," * "," * @return {Function}"," */","exports.createDeferred = function(f, millis, config) {","    var fn = config ? exports.createAugmenter(f, config) : f;","","    if(!millis) {","        return fn;","    }","","    return function() {","        var args = arguments;","","        setTimeout(function() {","            fn.apply(this, args);","        }, millis);","    };","};"];
