/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['object.js']) {
  _$jscoverage['object.js'] = [];
  _$jscoverage['object.js'][36] = 0;
  _$jscoverage['object.js'][37] = 0;
  _$jscoverage['object.js'][41] = 0;
  _$jscoverage['object.js'][42] = 0;
  _$jscoverage['object.js'][43] = 0;
  _$jscoverage['object.js'][47] = 0;
  _$jscoverage['object.js'][70] = 0;
  _$jscoverage['object.js'][71] = 0;
  _$jscoverage['object.js'][75] = 0;
  _$jscoverage['object.js'][76] = 0;
  _$jscoverage['object.js'][77] = 0;
  _$jscoverage['object.js'][81] = 0;
  _$jscoverage['object.js'][106] = 0;
  _$jscoverage['object.js'][107] = 0;
  _$jscoverage['object.js'][110] = 0;
  _$jscoverage['object.js'][111] = 0;
  _$jscoverage['object.js'][112] = 0;
  _$jscoverage['object.js'][115] = 0;
  _$jscoverage['object.js'][116] = 0;
  _$jscoverage['object.js'][117] = 0;
  _$jscoverage['object.js'][158] = 0;
  _$jscoverage['object.js'][159] = 0;
  _$jscoverage['object.js'][162] = 0;
  _$jscoverage['object.js'][163] = 0;
  _$jscoverage['object.js'][166] = 0;
  _$jscoverage['object.js'][214] = 0;
  _$jscoverage['object.js'][215] = 0;
  _$jscoverage['object.js'][218] = 0;
  _$jscoverage['object.js'][219] = 0;
  _$jscoverage['object.js'][220] = 0;
  _$jscoverage['object.js'][221] = 0;
  _$jscoverage['object.js'][222] = 0;
  _$jscoverage['object.js'][223] = 0;
  _$jscoverage['object.js'][225] = 0;
  _$jscoverage['object.js'][233] = 0;
}
_$jscoverage['object.js'][36]++;
exports.apply = (function (toObject, fromObject) {
  _$jscoverage['object.js'][37]++;
  var to = toObject || {}, from = fromObject || {}, prop;
  _$jscoverage['object.js'][41]++;
  for (prop in from) {
    _$jscoverage['object.js'][42]++;
    if (from.hasOwnProperty(prop)) {
      _$jscoverage['object.js'][43]++;
      to[prop] = from[prop];
    }
}
  _$jscoverage['object.js'][47]++;
  return to;
});
_$jscoverage['object.js'][70]++;
exports.mix = (function (toObject, fromObject) {
  _$jscoverage['object.js'][71]++;
  var to = toObject || {}, from = fromObject || {}, prop;
  _$jscoverage['object.js'][75]++;
  for (prop in from) {
    _$jscoverage['object.js'][76]++;
    if (from.hasOwnProperty(prop) && to[prop] === undefined) {
      _$jscoverage['object.js'][77]++;
      to[prop] = from[prop];
    }
}
  _$jscoverage['object.js'][81]++;
  return to;
});
_$jscoverage['object.js'][106]++;
exports.each = (function (obj, fn, thisArg, config) {
  _$jscoverage['object.js'][107]++;
  var key, value, allProperties = config && config.ownProperties === false;
  _$jscoverage['object.js'][110]++;
  if (allProperties) {
    _$jscoverage['object.js'][111]++;
    for (key in obj) {
      _$jscoverage['object.js'][112]++;
      fn.call(thisArg, key, obj[key]);
}
  }
  else {
    _$jscoverage['object.js'][115]++;
    for (key in obj) {
      _$jscoverage['object.js'][116]++;
      if (obj.hasOwnProperty(key)) {
        _$jscoverage['object.js'][117]++;
        fn.call(thisArg, key, obj[key]);
      }
}
  }
});
_$jscoverage['object.js'][158]++;
exports.toObject = (function (strings, values) {
  _$jscoverage['object.js'][159]++;
  var obj = {}, i = 0, len = strings.length;
  _$jscoverage['object.js'][162]++;
  for (; i < len; ++i) {
    _$jscoverage['object.js'][163]++;
    obj[strings[i]] = values[i];
}
  _$jscoverage['object.js'][166]++;
  return obj;
});
_$jscoverage['object.js'][214]++;
exports.filter = (function (obj, filterFn, thisArg, c) {
  _$jscoverage['object.js'][215]++;
  var values = [], config = c || {};
  _$jscoverage['object.js'][218]++;
  exports.each(obj, (function (key, value) {
  _$jscoverage['object.js'][219]++;
  if (filterFn.call(thisArg, key, value)) {
    _$jscoverage['object.js'][220]++;
    if (config.keys === true) {
      _$jscoverage['object.js'][221]++;
      values.push(key);
    }
    else {
      _$jscoverage['object.js'][222]++;
      if (config.values === true) {
        _$jscoverage['object.js'][223]++;
        values.push(value);
      }
      else {
        _$jscoverage['object.js'][225]++;
        values.push({value: value, key: key});
      }
    }
  }
}), thisArg, config);
  _$jscoverage['object.js'][233]++;
  return values;
});
_$jscoverage['object.js'].source = ["/**"," * @class Luc.Object"," * Package for Object methods.  Luc.Object.apply and Luc.Object.each"," * are used very often.  mix and apply are aliased to Luc.apply and Luc.mix."," */","","/**"," * Apply the properties from fromObject to the toObject.  fromObject will"," * overwrite any shared keys.  It can also be used as a simple shallow clone."," * ","    var to = {a:1, c:1}, from = {a:2, b:2}","    Luc.Object.apply(to, from)","    &gt;Object {a: 2, c: 1, b: 2}","    to === to","    &gt;true","    var clone = Luc.Object.apply({}, from)","    &gt;undefined","    clone","    &gt;Object {a: 2, b: 2}","    clone === from","    &gt;false"," *"," * No null checks are needed.","    ","    Luc.apply(undefined, {a:1})","    &gt;{a:1}","    Luc.apply({a: 1})","    &gt;{a:1}",""," *"," * "," * @param  {Object} [toObject] Object to put the properties fromObject on."," * @param  {Object} [fromObject] Object to put the properties on the toObject"," * @return {Object} the toObject"," */","exports.apply = function(toObject, fromObject) {","    var to = toObject || {},","        from = fromObject || {},","        prop;","","    for (prop in from) {","        if (from.hasOwnProperty(prop)) {","            to[prop] = from[prop];","        }","    }","","    return to;","};","","/**"," * Similar to Luc.Object.apply except that the fromObject will "," * NOT overwrite the keys of the toObject if they are defined."," *","    Luc.mix({a:1,b:2}, {a:3,b:4,c:5})","    &gt;{a: 1, b: 2, c: 5}",""," * No null checks are needed.","    ","    Luc.mix(undefined, {a:1})","    &gt;{a:1}","    Luc.mix({a: 1})","    &gt;{a:1}","    "," *",""," * @param  {Object} [toObject] Object to put the properties fromObject on."," * @param  {Object} [fromObject] fromObject Object to put the properties on the toObject"," * @return {Object} the toObject"," */","exports.mix = function(toObject, fromObject) {","    var to = toObject || {},","        from = fromObject || {},","        prop;","","    for (prop in from) {","        if (from.hasOwnProperty(prop) &amp;&amp; to[prop] === undefined) {","            to[prop] = from[prop];","        }","    }","","    return to;","};","","/**"," * Iterate over an objects properties"," * as key value \"pairs\" with the passed in function."," * ","    var thisArg = {val:'c'};","    Luc.Object.each({","        u: 'L'","    }, function(key, value) {","        console.log(value + key + this.val)","    }, thisArg)","    ","    &gt;Luc "," "," * @param  {Object}   obj  the object to iterate over"," * @param  {Function} fn   the function to call"," * @param  {String} fn.key   the object key"," * @param  {Object} fn.value   the object value"," * @param  {Object}   [thisArg] "," * @param {Object}  [config]"," * @param {Boolean}  config.ownProperties set to false"," * to iterate over all of the objects enumerable properties."," */","exports.each = function(obj, fn, thisArg, config) {","    var key, value,","        allProperties = config &amp;&amp; config.ownProperties === false;","","    if (allProperties) {","        for (key in obj) {","            fn.call(thisArg, key, obj[key]);","        }","    } else {","        for (key in obj) {","            if (obj.hasOwnProperty(key)) {","                fn.call(thisArg, key, obj[key]);","            }","        }","    }","};","","/**"," * Take an array of strings and an array/arguments of"," * values and return an object of key value pairs"," * based off each arrays index.  It is useful for taking"," * a long list of arguments and creating an object that can"," * be passed to other methods."," * ","    function longArgs(a,b,c,d,e,f) {","        return Luc.Object.toObject(['a','b', 'c', 'd', 'e', 'f'], arguments)","    }","","    longArgs(1,2,3,4,5,6,7,8,9)","","    &gt;Object {a: 1, b: 2, c: 3, d: 4, e: 5&#226;&#128;&#166;}","    a: 1","    b: 2","    c: 3","    d: 4","    e: 5","    f: 6","","    longArgs(1,2,3)","","    &gt;Object {a: 1, b: 2, c: 3, d: undefined, e: undefined&#226;&#128;&#166;}","    a: 1","    b: 2","    c: 3","    d: undefined","    e: undefined","    f: undefined",""," * @param  {String[]} strings"," * @param  {Array/arguments} values"," * @return {Object}"," */","exports.toObject = function(strings, values) {","    var obj = {},","        i = 0,","        len = strings.length;","    for (; i &lt; len; ++i) {","        obj[strings[i]] = values[i];","    }","","    return obj;","};","","/**"," * Return key value pairs from the object if the"," * filterFn returns a truthy value."," *","    Luc.Object.filter({","        a: false,","        b: true,","        c: false","    }, function(key, value) {","        return key === 'a' || value","    })","    &gt;[{key: 'a', value: false}, {key: 'b', value: true}]","","    Luc.Object.filter({","        a: false,","        b: true,","        c: false","    }, function(key, value) {","        return key === 'a' || value","    }, undefined, {","        keys: true","    })","    &gt;['a', 'b']"," * "," * @param  {Object}   obj  the object to iterate over"," * @param  {Function} filterFn   the function to call, return a truthy value"," * to add the key value pair"," * @param  {String} filterFn.key   the object key"," * @param  {Object} filterFn.value   the object value"," * @param  {Object}   [thisArg] "," * @param {Object}  [config]"," * @param {Boolean}  config.ownProperties set to false"," * to iterate over all of the objects enumerable properties."," * "," * @param {Boolean}  config.keys set to true to return"," * just the keys."," *"," * @param {Boolean}  config.values set to true to return"," * just the values."," * "," * @return {Object[]/String[]} Array of key value pairs in the form"," * of {key: 'key', value: value}.  If keys or values is true on the config"," * just the keys or values are returned."," *"," */","exports.filter = function(obj, filterFn, thisArg, c) {","    var values = [],","        config = c || {};","","    exports.each(obj, function(key, value) {","        if (filterFn.call(thisArg, key, value)) {","            if (config.keys === true) {","                values.push(key);","            } else if (config.values === true) {","                values.push(value);","            } else {","                values.push({","                    value: value,","                    key: key","                });","            }","        }","    }, thisArg, config);","","    return values;","};"];
