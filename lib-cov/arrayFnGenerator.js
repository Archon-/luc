/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['arrayFnGenerator.js']) {
  _$jscoverage['arrayFnGenerator.js'] = [];
  _$jscoverage['arrayFnGenerator.js'][1] = 0;
  _$jscoverage['arrayFnGenerator.js'][5] = 0;
  _$jscoverage['arrayFnGenerator.js'][12] = 0;
  _$jscoverage['arrayFnGenerator.js'][13] = 0;
  _$jscoverage['arrayFnGenerator.js'][18] = 0;
  _$jscoverage['arrayFnGenerator.js'][19] = 0;
  _$jscoverage['arrayFnGenerator.js'][20] = 0;
  _$jscoverage['arrayFnGenerator.js'][25] = 0;
  _$jscoverage['arrayFnGenerator.js'][83] = 0;
  _$jscoverage['arrayFnGenerator.js'][84] = 0;
  _$jscoverage['arrayFnGenerator.js'][86] = 0;
  _$jscoverage['arrayFnGenerator.js'][87] = 0;
  _$jscoverage['arrayFnGenerator.js'][88] = 0;
  _$jscoverage['arrayFnGenerator.js'][89] = 0;
  _$jscoverage['arrayFnGenerator.js'][90] = 0;
  _$jscoverage['arrayFnGenerator.js'][96] = 0;
  _$jscoverage['arrayFnGenerator.js'][97] = 0;
  _$jscoverage['arrayFnGenerator.js'][100] = 0;
  _$jscoverage['arrayFnGenerator.js'][102] = 0;
  _$jscoverage['arrayFnGenerator.js'][105] = 0;
  _$jscoverage['arrayFnGenerator.js'][108] = 0;
  _$jscoverage['arrayFnGenerator.js'][111] = 0;
  _$jscoverage['arrayFnGenerator.js'][115] = 0;
  _$jscoverage['arrayFnGenerator.js'][116] = 0;
  _$jscoverage['arrayFnGenerator.js'][117] = 0;
  _$jscoverage['arrayFnGenerator.js'][122] = 0;
  _$jscoverage['arrayFnGenerator.js'][123] = 0;
  _$jscoverage['arrayFnGenerator.js'][125] = 0;
  _$jscoverage['arrayFnGenerator.js'][126] = 0;
  _$jscoverage['arrayFnGenerator.js'][129] = 0;
  _$jscoverage['arrayFnGenerator.js'][130] = 0;
  _$jscoverage['arrayFnGenerator.js'][131] = 0;
  _$jscoverage['arrayFnGenerator.js'][132] = 0;
  _$jscoverage['arrayFnGenerator.js'][135] = 0;
  _$jscoverage['arrayFnGenerator.js'][138] = 0;
  _$jscoverage['arrayFnGenerator.js'][143] = 0;
  _$jscoverage['arrayFnGenerator.js'][144] = 0;
  _$jscoverage['arrayFnGenerator.js'][145] = 0;
}
_$jscoverage['arrayFnGenerator.js'][1]++;
var array = require("./array"), is = require("./is"), Generator;
_$jscoverage['arrayFnGenerator.js'][5]++;
Generator = {arrayFnNames: ["findFirstNot", "findAllNot", "findFirst", "findAll", "removeFirstNot", "removeAllNot", "removeFirst", "removeAll", "removeLastNot", "removeLast", "findLast", "findLastNot"], createFn: (function (arrayFnName, fn) {
  _$jscoverage['arrayFnGenerator.js'][12]++;
  return (function (arr) {
  _$jscoverage['arrayFnGenerator.js'][13]++;
  return array[arrayFnName](arr, fn);
});
}), createBoundFn: (function (arrayFnName, fnToBind) {
  _$jscoverage['arrayFnGenerator.js'][18]++;
  return (function (arr, value) {
  _$jscoverage['arrayFnGenerator.js'][19]++;
  var fn = fnToBind.apply(this, array.fromIndex(arguments, 1));
  _$jscoverage['arrayFnGenerator.js'][20]++;
  return array[arrayFnName](arr, fn);
});
})};
_$jscoverage['arrayFnGenerator.js'][25]++;
module.exports = Generator;
_$jscoverage['arrayFnGenerator.js'][83]++;
(function _createIsFns() {
  _$jscoverage['arrayFnGenerator.js'][84]++;
  var isToIgnore = ["isRegExp", "isArguments"];
  _$jscoverage['arrayFnGenerator.js'][86]++;
  Object.keys(is).forEach((function (key) {
  _$jscoverage['arrayFnGenerator.js'][87]++;
  var name = key.split("is")[1];
  _$jscoverage['arrayFnGenerator.js'][88]++;
  Generator.arrayFnNames.forEach((function (fnName) {
  _$jscoverage['arrayFnGenerator.js'][89]++;
  if (isToIgnore.indexOf(key) === -1) {
    _$jscoverage['arrayFnGenerator.js'][90]++;
    array[fnName + name] = Generator.createFn(fnName, is[key]);
  }
}));
}));
})();
_$jscoverage['arrayFnGenerator.js'][96]++;
(function _createFalsyFns() {
  _$jscoverage['arrayFnGenerator.js'][97]++;
  var usefullFalsyFns = ["findFirstNot", "findAllNot", "removeFirstNot", "removeAllNot", "removeFirst", "removeAll", "removeLastNot", "removeLast", "findLastNot"];
  _$jscoverage['arrayFnGenerator.js'][100]++;
  var fns = {"False": (function (val) {
  _$jscoverage['arrayFnGenerator.js'][102]++;
  return val === false;
}), "True": (function (val) {
  _$jscoverage['arrayFnGenerator.js'][105]++;
  return val === true;
}), "Null": (function (val) {
  _$jscoverage['arrayFnGenerator.js'][108]++;
  return val === null;
}), "Undefined": (function (val) {
  _$jscoverage['arrayFnGenerator.js'][111]++;
  return val === undefined;
})};
  _$jscoverage['arrayFnGenerator.js'][115]++;
  Object.keys(fns).forEach((function (key) {
  _$jscoverage['arrayFnGenerator.js'][116]++;
  usefullFalsyFns.forEach((function (fnName) {
  _$jscoverage['arrayFnGenerator.js'][117]++;
  array[fnName + key] = Generator.createFn(fnName, fns[key]);
}));
}));
})();
_$jscoverage['arrayFnGenerator.js'][122]++;
(function _createBoundFns() {
  _$jscoverage['arrayFnGenerator.js'][123]++;
  var fns = {"InstanceOf": (function (Constructor) {
  _$jscoverage['arrayFnGenerator.js'][125]++;
  return (function (value) {
  _$jscoverage['arrayFnGenerator.js'][126]++;
  return (value instanceof Constructor);
});
}), "In": (function (arr, c) {
  _$jscoverage['arrayFnGenerator.js'][129]++;
  var defaultC = {type: "looseRight"};
  _$jscoverage['arrayFnGenerator.js'][130]++;
  return (function (value) {
  _$jscoverage['arrayFnGenerator.js'][131]++;
  if (value !== false) {
    _$jscoverage['arrayFnGenerator.js'][132]++;
    var cfg = c || defaultC;
    _$jscoverage['arrayFnGenerator.js'][135]++;
    return array.findFirst(arr, value, cfg.type === "loose"? defaultC: cfg) !== false;
  }
  _$jscoverage['arrayFnGenerator.js'][138]++;
  return arr.indexOf(false) > -1;
});
})};
  _$jscoverage['arrayFnGenerator.js'][143]++;
  Object.keys(fns).forEach((function (key) {
  _$jscoverage['arrayFnGenerator.js'][144]++;
  Generator.arrayFnNames.forEach((function (fnName) {
  _$jscoverage['arrayFnGenerator.js'][145]++;
  array[fnName + key] = Generator.createBoundFn(fnName, fns[key]);
}));
}));
})();
_$jscoverage['arrayFnGenerator.js'].source = ["var array = require('./array'),","    is = require('./is'),","    Generator;","","Generator = {","    arrayFnNames: ['findFirstNot', 'findAllNot', 'findFirst', 'findAll',","            'removeFirstNot', 'removeAllNot', 'removeFirst', 'removeAll',","            'removeLastNot', 'removeLast', 'findLast', 'findLastNot'","    ],","","    createFn: function(arrayFnName, fn) {","        return function(arr) {","            return array[arrayFnName](arr, fn);","        };","    },","","    createBoundFn: function(arrayFnName, fnToBind) {","        return function(arr, value) {","            var fn = fnToBind.apply(this, array.fromIndex(arguments, 1));","            return array[arrayFnName](arr, fn);","        };","    }","};","","module.exports = Generator;","","/**"," * @class Luc.ArrayFns"," * This is documented as a separate package but it actually exists under the "," * Luc.Array namespace.  Check out the \"Filter class members\" input box"," * just to the right when searching for functions."," *&lt;br&gt;"," * "," * There are a lot of functions in this package but all of them "," * follow the same api.  \\*All functions will return an array of removed or found"," * items.  The items will be added to the array in the order they are"," * found.  \\*First functions will return the first item and stop iterating after that, if none"," *  is found false is returned.  remove\\* functions will directly change the passed in array."," *  \\*Not functions only do the following actions if the comparison is not true."," *  \\*Last functions do the same as their \\*First counterparts except that the iterating"," *  starts at the end of the array. Almost every public method of Luc.is is available it"," *  uses the following grammar Luc.Array[\"methodName\"\"isMethodName\"]"," *","      Luc.Array.findAllNotEmpty([false, true, null, undefined, 0, '', [], [1]])","      &gt; [true, 0, [1]]","","      Luc.Array.findAllNotFalsy([false, true, null, undefined, 0, '', [], [1]])","      &gt; [true, 0, [], [1]]","     ","      Luc.Array.findFirstNotString([1,2,3,'5'])","      &gt;1","      var arr = [1,2,3,'5'];","      Luc.Array.removeAllNotString(arr);","      &gt;[1,2,3]","      arr","      &gt;[\"5\"]"," *"," * As of right now there are two function sets which differ from the is"," * api."," *"," * InstanceOf"," * ","    Luc.Array.findAllInstanceOf([1,2, new Date(), {}, []], Object)","    &gt;[date, {}, []]","    &gt;Luc.Array.findAllNotInstanceOf([1,2, new Date(), {}, []], Object)","    [1, 2]"," *"," * In"," * ","    Luc.Array.findAllIn([1,2,3], [1,2])","    &gt;[1, 2]","    Luc.Array.findFirstIn([1,2,3], [1,2])","    &gt;1","","    //defaults to loose comparison","    Luc.Array.findAllIn([1,2,3, {a:1, b:2}], [1,{a:1}])","    &gt; [1, {a:1,b:2}]","","    Luc.Array.findAllIn([1,2,3, {a:1, b:2}], [1,{a:1}], {type: 'deep'})","    &gt;[1]"," */","","(function _createIsFns() {","    var isToIgnore = ['isRegExp', 'isArguments'];","","    Object.keys(is).forEach(function(key) {","        var name = key.split('is')[1];","        Generator.arrayFnNames.forEach(function(fnName) {","            if(isToIgnore.indexOf(key) === -1) {","                array[fnName + name] = Generator.createFn(fnName, is[key]);","            }","        });","    });","}());","","(function _createFalsyFns() {","    var usefullFalsyFns = ['findFirstNot', 'findAllNot', 'removeFirstNot', 'removeAllNot',","                            'removeFirst', 'removeAll', 'removeLastNot', 'removeLast',  'findLastNot'];","","    var fns = {","        'False': function(val) {","            return val === false;","        },","        'True': function(val) {","            return val === true;","        },","        'Null': function(val) {","            return val === null;","        },","        'Undefined': function(val) {","            return val === undefined;","        }","    };","","    Object.keys(fns).forEach(function(key) {","        usefullFalsyFns.forEach(function(fnName) {","            array[fnName + key] = Generator.createFn(fnName, fns[key]);","        });","    });","}());","","(function _createBoundFns() {","    var fns = {","        'InstanceOf': function(Constructor) {","            return function(value) {","                return (value instanceof Constructor);","            };","        },'In': function(arr, c) {","            var defaultC = {type:'looseRight'};","            return function(value) {","                if(value !== false) {","                    var cfg = c || defaultC;","                    //this is a right to left comparison ","                    //expected loose behavior should be looseRight","                    return array.findFirst(arr, value, cfg.type === 'loose' ? defaultC : cfg) !== false;","                }","                ","                return arr.indexOf(false) &gt; -1;","            };","        }","    };","","    Object.keys(fns).forEach(function(key) {","        Generator.arrayFnNames.forEach(function(fnName) {","            array[fnName + key] = Generator.createBoundFn(fnName, fns[key]);","        });","    });","}());"];
