/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['is.js']) {
  _$jscoverage['is.js'] = [];
  _$jscoverage['is.js'][1] = 0;
  _$jscoverage['is.js'][11] = 0;
  _$jscoverage['is.js'][12] = 0;
  _$jscoverage['is.js'][22] = 0;
  _$jscoverage['is.js'][23] = 0;
  _$jscoverage['is.js'][33] = 0;
  _$jscoverage['is.js'][34] = 0;
  _$jscoverage['is.js'][44] = 0;
  _$jscoverage['is.js'][45] = 0;
  _$jscoverage['is.js'][55] = 0;
  _$jscoverage['is.js'][56] = 0;
  _$jscoverage['is.js'][66] = 0;
  _$jscoverage['is.js'][67] = 0;
  _$jscoverage['is.js'][77] = 0;
  _$jscoverage['is.js'][78] = 0;
  _$jscoverage['is.js'][89] = 0;
  _$jscoverage['is.js'][90] = 0;
  _$jscoverage['is.js'][101] = 0;
  _$jscoverage['is.js'][102] = 0;
  _$jscoverage['is.js'][113] = 0;
  _$jscoverage['is.js'][114] = 0;
  _$jscoverage['is.js'][116] = 0;
  _$jscoverage['is.js'][117] = 0;
  _$jscoverage['is.js'][118] = 0;
  _$jscoverage['is.js'][119] = 0;
  _$jscoverage['is.js'][120] = 0;
  _$jscoverage['is.js'][121] = 0;
  _$jscoverage['is.js'][124] = 0;
  _$jscoverage['is.js'][127] = 0;
}
_$jscoverage['is.js'][1]++;
var oToString = Object.prototype.toString;
_$jscoverage['is.js'][11]++;
function isArray(obj) {
  _$jscoverage['is.js'][12]++;
  return Array.isArray(obj);
}
_$jscoverage['is.js'][22]++;
function isObject(obj) {
  _$jscoverage['is.js'][23]++;
  return obj && oToString.call(obj) === "[object Object]";
}
_$jscoverage['is.js'][33]++;
function isFunction(obj) {
  _$jscoverage['is.js'][34]++;
  return oToString.call(obj) === "[object Function]";
}
_$jscoverage['is.js'][44]++;
function isDate(obj) {
  _$jscoverage['is.js'][45]++;
  return oToString.call(obj) === "[object Date]";
}
_$jscoverage['is.js'][55]++;
function isRegExp(obj) {
  _$jscoverage['is.js'][56]++;
  return oToString.call(obj) === "[object RegExp]";
}
_$jscoverage['is.js'][66]++;
function isNumber(obj) {
  _$jscoverage['is.js'][67]++;
  return oToString.call(obj) === "[object Number]";
}
_$jscoverage['is.js'][77]++;
function isString(obj) {
  _$jscoverage['is.js'][78]++;
  return oToString.call(obj) === "[object String]";
}
_$jscoverage['is.js'][89]++;
function isArguments(obj) {
  _$jscoverage['is.js'][90]++;
  return oToString.call(obj) === "[object Arguments]" || obj && ! ! obj.callee;
}
_$jscoverage['is.js'][101]++;
function isFalsy(obj) {
  _$jscoverage['is.js'][102]++;
  return (! obj && obj !== 0);
}
_$jscoverage['is.js'][113]++;
function isEmpty(obj) {
  _$jscoverage['is.js'][114]++;
  var empty = false;
  _$jscoverage['is.js'][116]++;
  if (isFalsy(obj)) {
    _$jscoverage['is.js'][117]++;
    empty = true;
  }
  else {
    _$jscoverage['is.js'][118]++;
    if (isArray(obj)) {
      _$jscoverage['is.js'][119]++;
      empty = obj.length === 0;
    }
    else {
      _$jscoverage['is.js'][120]++;
      if (isObject(obj)) {
        _$jscoverage['is.js'][121]++;
        empty = Object.keys(obj).length === 0;
      }
    }
  }
  _$jscoverage['is.js'][124]++;
  return empty;
}
_$jscoverage['is.js'][127]++;
module.exports = {isArray: isArray, isObject: isObject, isFunction: isFunction, isDate: isDate, isString: isString, isNumber: isNumber, isRegExp: isRegExp, isArguments: isArguments, isFalsy: isFalsy, isEmpty: isEmpty};
_$jscoverage['is.js'].source = ["var oToString = Object.prototype.toString;","","","/**"," * @member Luc"," * Return true if the passed in object is of"," * the type {@link Array Array}"," * @param  {Object}  obj "," * @return {Boolean}"," */","function isArray(obj) {","    return Array.isArray(obj);","}","","/**"," * @member Luc"," * Return true if the passed in object is of"," * the type {@link Object Object}"," * @param  {Object}  obj "," * @return {Boolean}"," */","function isObject(obj) {","    return obj &amp;&amp; oToString.call(obj) === '[object Object]';","}","","/**"," * @member Luc"," * Return true if the passed in object is of"," * the type {@link Function Function}"," * @param  {Object}  obj "," * @return {Boolean}"," */","function isFunction(obj) {","    return oToString.call(obj) === '[object Function]';","}","","/**"," * @member Luc"," * Return true if the passed in object is of"," * the type {@link Date Date}"," * @param  {Object}  obj "," * @return {Boolean}"," */","function isDate(obj) {","    return oToString.call(obj) === '[object Date]';","}","","/**"," * @member Luc"," * Return true if the passed in object is of"," * the type {@link RegExp RegExp}"," * @param  {Object}  obj "," * @return {Boolean}"," */","function isRegExp(obj) {","    return oToString.call(obj) === '[object RegExp]';","}","","/**"," * @member Luc"," * Return true if the passed in object is of"," * the type {@link Number Number}"," * @param  {Object}  obj "," * @return {Boolean}"," */","function isNumber(obj) {","    return oToString.call(obj) === '[object Number]';","}","","/**"," * @member Luc"," * Return true if the passed in object is of"," * the type {@link String String}"," * @param  {Object}  obj "," * @return {Boolean}"," */","function isString(obj) {","    return oToString.call(obj) === '[object String]';","}","","/**"," * @member Luc"," * Return true if the passed in object is of"," * the type arguments."," * "," * @param  {Object}  obj "," * @return {Boolean}"," */","function isArguments(obj) {","    return oToString.call(obj) === '[object Arguments]' || obj &amp;&amp; !!obj.callee;","}","","/**"," * @member Luc"," * Return true if the object is falsy but not zero.  If"," * you want falsy check that includes zero use a goram "," * if statement :)"," * @param  {Object}  obj"," * @return {Boolean}     "," */","function isFalsy(obj) {","    return (!obj &amp;&amp; obj !== 0);","}","","/**"," * @member Luc"," * Return true if the object is empty."," * {}, [], '',false, null, undefined, NaN "," * Are all treated as empty."," * @param  {Object}  obj"," * @return {Boolean}"," */","function isEmpty(obj) {","    var empty = false;","","    if (isFalsy(obj)) {","        empty = true;","    } else if (isArray(obj)) {","        empty = obj.length === 0;","    } else if (isObject(obj)) {","        empty = Object.keys(obj).length === 0;","    }","","    return empty;","}","","module.exports = {","    isArray: isArray,","    isObject: isObject,","    isFunction: isFunction,","    isDate: isDate,","    isString: isString,","    isNumber: isNumber,","    isRegExp: isRegExp,","    isArguments: isArguments,","    isFalsy: isFalsy,","    isEmpty: isEmpty","};"];
