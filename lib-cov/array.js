/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['array.js']) {
  _$jscoverage['array.js'] = [];
  _$jscoverage['array.js'][1] = 0;
  _$jscoverage['array.js'][6] = 0;
  _$jscoverage['array.js'][7] = 0;
  _$jscoverage['array.js'][9] = 0;
  _$jscoverage['array.js'][10] = 0;
  _$jscoverage['array.js'][13] = 0;
  _$jscoverage['array.js'][14] = 0;
  _$jscoverage['array.js'][17] = 0;
  _$jscoverage['array.js'][18] = 0;
  _$jscoverage['array.js'][22] = 0;
  _$jscoverage['array.js'][23] = 0;
  _$jscoverage['array.js'][25] = 0;
  _$jscoverage['array.js'][26] = 0;
  _$jscoverage['array.js'][113] = 0;
  _$jscoverage['array.js'][114] = 0;
  _$jscoverage['array.js'][115] = 0;
  _$jscoverage['array.js'][117] = 0;
  _$jscoverage['array.js'][132] = 0;
  _$jscoverage['array.js'][133] = 0;
  _$jscoverage['array.js'][146] = 0;
  _$jscoverage['array.js'][147] = 0;
  _$jscoverage['array.js'][148] = 0;
  _$jscoverage['array.js'][164] = 0;
  _$jscoverage['array.js'][165] = 0;
  _$jscoverage['array.js'][166] = 0;
  _$jscoverage['array.js'][193] = 0;
  _$jscoverage['array.js'][194] = 0;
  _$jscoverage['array.js'][195] = 0;
  _$jscoverage['array.js'][218] = 0;
  _$jscoverage['array.js'][219] = 0;
  _$jscoverage['array.js'][223] = 0;
  _$jscoverage['array.js'][224] = 0;
  _$jscoverage['array.js'][227] = 0;
  _$jscoverage['array.js'][228] = 0;
  _$jscoverage['array.js'][229] = 0;
  _$jscoverage['array.js'][246] = 0;
  _$jscoverage['array.js'][247] = 0;
  _$jscoverage['array.js'][248] = 0;
  _$jscoverage['array.js'][249] = 0;
  _$jscoverage['array.js'][252] = 0;
  _$jscoverage['array.js'][253] = 0;
  _$jscoverage['array.js'][255] = 0;
  _$jscoverage['array.js'][256] = 0;
  _$jscoverage['array.js'][257] = 0;
  _$jscoverage['array.js'][258] = 0;
  _$jscoverage['array.js'][262] = 0;
  _$jscoverage['array.js'][274] = 0;
  _$jscoverage['array.js'][275] = 0;
  _$jscoverage['array.js'][276] = 0;
  _$jscoverage['array.js'][288] = 0;
  _$jscoverage['array.js'][289] = 0;
  _$jscoverage['array.js'][290] = 0;
  _$jscoverage['array.js'][294] = 0;
  _$jscoverage['array.js'][295] = 0;
  _$jscoverage['array.js'][298] = 0;
  _$jscoverage['array.js'][299] = 0;
  _$jscoverage['array.js'][300] = 0;
  _$jscoverage['array.js'][301] = 0;
  _$jscoverage['array.js'][305] = 0;
  _$jscoverage['array.js'][306] = 0;
  _$jscoverage['array.js'][309] = 0;
  _$jscoverage['array.js'][321] = 0;
  _$jscoverage['array.js'][322] = 0;
  _$jscoverage['array.js'][323] = 0;
  _$jscoverage['array.js'][335] = 0;
  _$jscoverage['array.js'][336] = 0;
  _$jscoverage['array.js'][337] = 0;
  _$jscoverage['array.js'][340] = 0;
  _$jscoverage['array.js'][341] = 0;
  _$jscoverage['array.js'][342] = 0;
  _$jscoverage['array.js'][343] = 0;
  _$jscoverage['array.js'][344] = 0;
  _$jscoverage['array.js'][345] = 0;
  _$jscoverage['array.js'][349] = 0;
  _$jscoverage['array.js'][361] = 0;
  _$jscoverage['array.js'][362] = 0;
  _$jscoverage['array.js'][363] = 0;
  _$jscoverage['array.js'][375] = 0;
  _$jscoverage['array.js'][376] = 0;
  _$jscoverage['array.js'][377] = 0;
  _$jscoverage['array.js'][380] = 0;
  _$jscoverage['array.js'][381] = 0;
  _$jscoverage['array.js'][382] = 0;
  _$jscoverage['array.js'][394] = 0;
  _$jscoverage['array.js'][395] = 0;
  _$jscoverage['array.js'][396] = 0;
  _$jscoverage['array.js'][408] = 0;
  _$jscoverage['array.js'][409] = 0;
  _$jscoverage['array.js'][410] = 0;
  _$jscoverage['array.js'][414] = 0;
  _$jscoverage['array.js'][415] = 0;
  _$jscoverage['array.js'][416] = 0;
  _$jscoverage['array.js'][417] = 0;
  _$jscoverage['array.js'][418] = 0;
  _$jscoverage['array.js'][419] = 0;
  _$jscoverage['array.js'][421] = 0;
  _$jscoverage['array.js'][422] = 0;
  _$jscoverage['array.js'][423] = 0;
  _$jscoverage['array.js'][424] = 0;
  _$jscoverage['array.js'][425] = 0;
  _$jscoverage['array.js'][427] = 0;
  _$jscoverage['array.js'][428] = 0;
  _$jscoverage['array.js'][429] = 0;
  _$jscoverage['array.js'][430] = 0;
  _$jscoverage['array.js'][432] = 0;
  _$jscoverage['array.js'][433] = 0;
  _$jscoverage['array.js'][434] = 0;
  _$jscoverage['array.js'][436] = 0;
  _$jscoverage['array.js'][437] = 0;
  _$jscoverage['array.js'][439] = 0;
  _$jscoverage['array.js'][440] = 0;
  _$jscoverage['array.js'][441] = 0;
  _$jscoverage['array.js'][443] = 0;
  _$jscoverage['array.js'][448] = 0;
  _$jscoverage['array.js'][449] = 0;
}
_$jscoverage['array.js'][1]++;
var arraySlice = Array.prototype.slice, compare = require("./compare"), is = require("./is"), compare = compare.compare;
_$jscoverage['array.js'][6]++;
function _createIteratorFn(fn, c) {
  _$jscoverage['array.js'][7]++;
  var config = c || {};
  _$jscoverage['array.js'][9]++;
  if (is.isFunction(fn) && (config.type !== "strict")) {
    _$jscoverage['array.js'][10]++;
    return c? fn.bind(c): fn;
  }
  _$jscoverage['array.js'][13]++;
  if (config.type === undefined) {
    _$jscoverage['array.js'][14]++;
    config.type = "loose";
  }
  _$jscoverage['array.js'][17]++;
  return (function (value) {
  _$jscoverage['array.js'][18]++;
  return compare(fn, value, config);
});
}
_$jscoverage['array.js'][22]++;
function _createIteratorNotFn(fn, config) {
  _$jscoverage['array.js'][23]++;
  var functionToNot = _createIteratorFn(fn, config);
  _$jscoverage['array.js'][25]++;
  return (function () {
  _$jscoverage['array.js'][26]++;
  return ! functionToNot.apply(this, arguments);
});
}
_$jscoverage['array.js'][113]++;
function toArray(item) {
  _$jscoverage['array.js'][114]++;
  if (Array.isArray(item)) {
    _$jscoverage['array.js'][115]++;
    return item;
  }
  _$jscoverage['array.js'][117]++;
  return (item === null || item === undefined)? []: [item];
}
_$jscoverage['array.js'][132]++;
function last(arr) {
  _$jscoverage['array.js'][133]++;
  return arr[arr.length - 1];
}
_$jscoverage['array.js'][146]++;
function pluck(arr, key) {
  _$jscoverage['array.js'][147]++;
  return arr.map((function (value) {
  _$jscoverage['array.js'][148]++;
  return value && value[key];
}));
}
_$jscoverage['array.js'][164]++;
function fromIndex(a, index) {
  _$jscoverage['array.js'][165]++;
  var arr = is.isArguments(a)? arraySlice.call(a): a;
  _$jscoverage['array.js'][166]++;
  return arraySlice.call(arr, index, arr.length);
}
_$jscoverage['array.js'][193]++;
function each(item, fn, thisArg) {
  _$jscoverage['array.js'][194]++;
  var arr = toArray(item);
  _$jscoverage['array.js'][195]++;
  return arr.forEach.call(arr, fn, thisArg);
}
_$jscoverage['array.js'][218]++;
function insert(firstArrayOrArgs, secondArrayOrArgs, indexOrAppend) {
  _$jscoverage['array.js'][219]++;
  var firstArray = arraySlice.call(firstArrayOrArgs), secondArray = arraySlice.call(secondArrayOrArgs), spliceArgs;
  _$jscoverage['array.js'][223]++;
  if (indexOrAppend === true) {
    _$jscoverage['array.js'][224]++;
    return firstArray.concat(secondArray);
  }
  _$jscoverage['array.js'][227]++;
  spliceArgs = [indexOrAppend, 0].concat(secondArray);
  _$jscoverage['array.js'][228]++;
  firstArray.splice.apply(firstArray, spliceArgs);
  _$jscoverage['array.js'][229]++;
  return firstArray;
}
_$jscoverage['array.js'][246]++;
function removeAtIndex(arr, index) {
  _$jscoverage['array.js'][247]++;
  var item = arr[index];
  _$jscoverage['array.js'][248]++;
  arr.splice(index, 1);
  _$jscoverage['array.js'][249]++;
  return item;
}
_$jscoverage['array.js'][252]++;
function _removeFirst(arr, fn) {
  _$jscoverage['array.js'][253]++;
  var removed = false;
  _$jscoverage['array.js'][255]++;
  arr.some((function (value, index) {
  _$jscoverage['array.js'][256]++;
  if (fn.apply(this, arguments)) {
    _$jscoverage['array.js'][257]++;
    removed = removeAtIndex(arr, index);
    _$jscoverage['array.js'][258]++;
    return true;
  }
}));
  _$jscoverage['array.js'][262]++;
  return removed;
}
_$jscoverage['array.js'][274]++;
function removeFirst(arr, obj, config) {
  _$jscoverage['array.js'][275]++;
  var fn = _createIteratorFn(obj, config);
  _$jscoverage['array.js'][276]++;
  return _removeFirst(arr, fn);
}
_$jscoverage['array.js'][288]++;
function removeFirstNot(arr, obj, config) {
  _$jscoverage['array.js'][289]++;
  var fn = _createIteratorNotFn(obj, config);
  _$jscoverage['array.js'][290]++;
  return _removeFirst(arr, fn);
}
_$jscoverage['array.js'][294]++;
function _removeAll(arr, fn) {
  _$jscoverage['array.js'][295]++;
  var indexsToRemove = [], removed = [];
  _$jscoverage['array.js'][298]++;
  arr.forEach((function (value, index) {
  _$jscoverage['array.js'][299]++;
  if (fn.apply(this, arguments)) {
    _$jscoverage['array.js'][300]++;
    indexsToRemove.unshift(index);
    _$jscoverage['array.js'][301]++;
    removed.push(value);
  }
}));
  _$jscoverage['array.js'][305]++;
  indexsToRemove.forEach((function (index) {
  _$jscoverage['array.js'][306]++;
  removeAtIndex(arr, index);
}));
  _$jscoverage['array.js'][309]++;
  return removed;
}
_$jscoverage['array.js'][321]++;
function removeAllNot(arr, obj, config) {
  _$jscoverage['array.js'][322]++;
  var fn = _createIteratorNotFn(obj, config);
  _$jscoverage['array.js'][323]++;
  return _removeAll(arr, fn);
}
_$jscoverage['array.js'][335]++;
function removeAll(arr, obj, config) {
  _$jscoverage['array.js'][336]++;
  var fn = _createIteratorFn(obj, config);
  _$jscoverage['array.js'][337]++;
  return _removeAll(arr, fn);
}
_$jscoverage['array.js'][340]++;
function _findFirst(arr, fn) {
  _$jscoverage['array.js'][341]++;
  var item = false;
  _$jscoverage['array.js'][342]++;
  arr.some((function (value, index) {
  _$jscoverage['array.js'][343]++;
  if (fn.apply(this, arguments)) {
    _$jscoverage['array.js'][344]++;
    item = arr[index];
    _$jscoverage['array.js'][345]++;
    return true;
  }
}));
  _$jscoverage['array.js'][349]++;
  return item;
}
_$jscoverage['array.js'][361]++;
function findFirst(arr, obj, config) {
  _$jscoverage['array.js'][362]++;
  var fn = _createIteratorFn(obj, config);
  _$jscoverage['array.js'][363]++;
  return _findFirst(arr, fn);
}
_$jscoverage['array.js'][375]++;
function findFirstNot(arr, obj, config) {
  _$jscoverage['array.js'][376]++;
  var fn = _createIteratorNotFn(obj, config);
  _$jscoverage['array.js'][377]++;
  return _findFirst(arr, fn);
}
_$jscoverage['array.js'][380]++;
function _findAll(arr, fn) {
  _$jscoverage['array.js'][381]++;
  var found = arr.filter(fn);
  _$jscoverage['array.js'][382]++;
  return found;
}
_$jscoverage['array.js'][394]++;
function findAll(arr, obj, config) {
  _$jscoverage['array.js'][395]++;
  var fn = _createIteratorFn(obj, config);
  _$jscoverage['array.js'][396]++;
  return _findAll(arr, fn);
}
_$jscoverage['array.js'][408]++;
function findAllNot(arr, obj, config) {
  _$jscoverage['array.js'][409]++;
  var fn = _createIteratorNotFn(obj, config);
  _$jscoverage['array.js'][410]++;
  return _findAll(arr, fn);
}
_$jscoverage['array.js'][414]++;
exports.toArray = toArray;
_$jscoverage['array.js'][415]++;
exports.each = each;
_$jscoverage['array.js'][416]++;
exports.insert = insert;
_$jscoverage['array.js'][417]++;
exports.fromIndex = fromIndex;
_$jscoverage['array.js'][418]++;
exports.last = last;
_$jscoverage['array.js'][419]++;
exports.pluck = pluck;
_$jscoverage['array.js'][421]++;
exports.removeAtIndex = removeAtIndex;
_$jscoverage['array.js'][422]++;
exports.findFirstNot = findFirstNot;
_$jscoverage['array.js'][423]++;
exports.findAllNot = findAllNot;
_$jscoverage['array.js'][424]++;
exports.findFirst = findFirst;
_$jscoverage['array.js'][425]++;
exports.findAll = findAll;
_$jscoverage['array.js'][427]++;
exports.removeFirstNot = removeFirstNot;
_$jscoverage['array.js'][428]++;
exports.removeAllNot = removeAllNot;
_$jscoverage['array.js'][429]++;
exports.removeFirst = removeFirst;
_$jscoverage['array.js'][430]++;
exports.removeAll = removeAll;
_$jscoverage['array.js'][432]++;
(function () {
  _$jscoverage['array.js'][433]++;
  var _createLastFn = (function (fnName) {
  _$jscoverage['array.js'][434]++;
  var lastName = fnName.replace("First", "Last");
  _$jscoverage['array.js'][436]++;
  exports[lastName] = (function (arr, obj, config) {
  _$jscoverage['array.js'][437]++;
  var ret;
  _$jscoverage['array.js'][439]++;
  arr.reverse();
  _$jscoverage['array.js'][440]++;
  ret = exports[fnName](arr, obj, config);
  _$jscoverage['array.js'][441]++;
  arr.reverse();
  _$jscoverage['array.js'][443]++;
  return ret;
});
}), namesToAddLast = ["findFirstNot", "findFirst", "removeFirstNot", "removeFirst"];
  _$jscoverage['array.js'][448]++;
  namesToAddLast.forEach((function (fnName) {
  _$jscoverage['array.js'][449]++;
  _createLastFn(fnName);
}));
})();
_$jscoverage['array.js'].source = ["var arraySlice = Array.prototype.slice,","    compare = require('./compare'),","    is = require('./is'),","    compare = compare.compare;","","function _createIteratorFn(fn, c) {","    var config = c || {};","","    if(is.isFunction(fn) &amp;&amp; (config.type !== 'strict')) {","        return c ? fn.bind(c) : fn;","    }","","    if(config.type === undefined) {","        config.type = 'loose';","    }","","    return function(value) {","        return compare(fn, value, config);","    };","}","","function _createIteratorNotFn(fn, config) {","    var functionToNot = _createIteratorFn(fn, config);","        ","    return function() {","        return !functionToNot.apply(this, arguments);","    };","}","","","/**"," * @class Luc.Array "," * Package for Array methods. &lt;br&gt;"," * "," * Keep in mind that Luc is optionally packaged with es5 shim so you can write es5 code in non es5 browsers."," * It comes with your favorite {@link Array Array} methods such as Array.forEach, Array.filter, Array.some, Array.every Array.reduceRight .."," *"," * Also don't forget about Luc.Array.each and Luc.Array.toArray, they are great utility methods"," * that are used all over the framework."," * "," * All remove\\* / find\\* methods follow the same api.  \\*All functions will return an array of removed or found"," * items.  The items will be added to the array in the order they are"," * found.  \\*First functions will return the first item and stop iterating after that, if none"," *  is found false is returned.  remove\\* functions will directly change the passed in array."," *  \\*Not functions only do the following actions if the comparison is not true."," *  All remove\\* / find\\* take the following api: array, objectToCompareOrIterator, compareConfigOrThisArg for example:"," *","    //most common use case","    Luc.Array.findFirst([1,2,3, {}], {});","    &gt;Object {}","","    //pass in option config for a strict === comparison","    Luc.Array.findFirst([1,2,3,{}], {}, {type: 'strict'});","    &gt;false","","    //pass in an iterator and thisArg","    Luc.Array.findFirst([1,2,3,{}], function(val, index, array){","        return val === 3 || this.num === val;","    }, {num: 1});","    &gt;1","    ","    //you can see remove modifies the passed in array.","    var arr = [1,2,{a:1},1, {a:1}];","    Luc.Array.removeFirst(arr, {a:1})","    &gt;{a:1}","    arr;","    &gt;[1, 2, 1, {a:1}]","    Luc.Array.removeLast(arr, 1)","    &gt;1","    arr;","    &gt;[1,2, {a:1}]","    ","    ","    Luc.Array.findAll([1,2,3, {a:1,b:2}], function() {return true;})","    &gt; [1,2,3, {a:1,b:2}]","    //show how not works with an iterator","    Luc.Array.findAllNot([1,2,3, {a:1,b:2}], function() {return true;})","    &gt;[]"," *"," * For commonly used find/remove functions check out Luc.ArrayFns for example a"," * \"compact\" like function"," * ","    Luc.Array.findAllNotFalsy([false, '', undefined, 0, {}, []])","    &gt;[0, {}, []]"," *"," * Or remove all empty items"," * ","    var arr = ['', 0 , [], {a:1}, true, {}, [1]]","    Luc.Array.removeAllEmpty(arr)","    &gt;['', [], {}]","    arr","    &gt;[0, {a:1}, true, [1]]"," */","","/**"," * Turn the passed in item into an array if it"," * isn't one already, if the item is an array just return it.  "," * It returns an empty array if item is null or undefined."," * If it is just a single item return an array containing the item."," * ","    Luc.Array.toArray()","    &gt;[]","    Luc.Array.toArray(null)","    &gt;[]","    Luc.Array.toArray(1)","    &gt;[1]","    Luc.Array.toArray([1,2])","    &gt;[1, 2]"," *"," * @param  {Object} item item to turn into an array."," * @return the array"," */","function toArray(item) {","    if (Array.isArray(item)) {","        return item;","    }","    return (item === null || item === undefined) ? [] : [item];","}","","/**"," * Return the last item of the array"," * @param  {Array} arr"," * @return {Object} the item","    ","    var myLongArrayNameForThingsThatIWantToKeepTrackOf = [1,2,3]","    ","    Luc.Array.last(myLongArrayNameForThingsThatIWantToKeepTrackOf);","    vs.","    myLongArrayNameForThingsThatIWantToKeepTrackOf[myLongArrayNameForThingsThatIWantToKeepTrackOf.length -1]"," *"," */","function last(arr) {","    return arr[arr.length -1];","}","","/**"," * Flatten out an array of objects based of their value for the passed in key."," * This also takes acccount for null/undefined values."," *","    Luc.Array.pluck([undefined, {a:'1', b:2}, {b:3}, {b:4}], 'b')","    &gt;[undefined, 2, 3, 4]"," * @param  {Object[]} arr "," * @param  {String} key "," * @return {Array}     "," */","function pluck(arr, key) {","    return arr.map(function(value) {","        return value &amp;&amp; value[key];","    });","}","","/**"," * Return the items inbetween the passed in index"," * and the end of the array."," *","    Luc.Array.fromIndex([1,2,3,4,5], 1)","    &gt;[2, 3, 4, 5]",""," * @param  {Array/arguments} arr "," * @param  {Number} index "," * @return {Array} the new array."," * "," */","function fromIndex(a, index) {","    var arr = is.isArguments(a) ? arraySlice.call(a) : a;","    return arraySlice.call(arr, index, arr.length);","}","","/**"," * Runs an Array.forEach after calling Luc.Array.toArray on the item.","  It is very useful for setting up flexible api's that can handle none one or many.","","    Luc.Array.each(this.items, function(item) {","        this._addItem(item);","    });","","    vs.","","    if(Array.isArray(this.items)){","        this.items.forEach(function(item) {","            this._addItem(item);","        })","    }","    else if(this.items !== undefined) {","        this._addItem(this.items);","    }",""," * @param  {Object}   item"," * @param  {Function} callback"," * @param  {Object}   thisArg   "," *"," */","function each(item, fn, thisArg) {","    var arr = toArray(item);","    return arr.forEach.call(arr, fn, thisArg);","}","","/**"," * Insert or append the second array/arguments into the"," * first array/arguments.  This method does not alter"," * the passed in array/arguments."," * "," * @param  {Array/arguments} firstArrayOrArgs"," * @param  {Array/arguments} secondArrayOrArgs"," * @param  {Number/true} indexOrAppend true to append "," * the second array to the end of the first one.  If it is a number"," * insert the secondArray into the first one at the passed in index."," * @return {Array} the newly created array."," *","    Luc.Array.insert([0,4], [1,2,3], 1);","    &gt;[0, 1, 2, 3, 4]","    Luc.Array.insert([0,4], [1,2,3], true);","    &gt;[0, 4, 1, 2, 3]","    Luc.Array.insert([0,4], [1,2,3], 0);","    &gt;[1, 2, 3, 0, 4]"," *"," */","function insert(firstArrayOrArgs, secondArrayOrArgs, indexOrAppend) {","    var firstArray = arraySlice.call(firstArrayOrArgs),","        secondArray = arraySlice.call(secondArrayOrArgs),","        spliceArgs;","","    if(indexOrAppend === true) {","        return firstArray.concat(secondArray);","    }","","    spliceArgs = [indexOrAppend, 0].concat(secondArray);","    firstArray.splice.apply(firstArray, spliceArgs);","    return firstArray;","}","","/**"," * Remove an item from an the passed in arr"," * from the index."," * @param  {Array} arr"," * @param  {Number} index"," * @return {Object} the item removed."," *","    var arr = [1,2,3];","    Luc.Array.removeAtIndex(arr, 1);","    &gt;2","    arr;","    &gt;[1,3]",""," */","function removeAtIndex(arr, index) {","    var item = arr[index];","    arr.splice(index, 1);","    return item;","}","","function _removeFirst(arr, fn) {","    var removed = false;","","    arr.some(function(value, index) {","        if (fn.apply(this, arguments)) {","            removed = removeAtIndex(arr, index);","            return true;","        }","    });","","    return removed;","}","","/**"," * Remove the first item from the passed in array"," * that {@link Luc#compare matches} the passed in object.  Instead of "," * comparing an object an iterator function can be"," * used."," * ","{copyDoc#arrParams}","{copyDoc#arrRemoveSingle}"," */","function removeFirst(arr, obj, config) {","    var fn = _createIteratorFn(obj, config);","    return _removeFirst(arr, fn);","}","","/**"," * Remove the first item from the passed in array"," * that does not {@link Luc#compare match} the passed in object.  Instead of "," * comparing an object an iterator function can be"," * used."," * ","{copyDoc#arrParams}","{copyDoc#arrRemoveSingle}"," */","function removeFirstNot(arr, obj, config) {","    var fn = _createIteratorNotFn(obj, config);","    return _removeFirst(arr, fn);","}","","","function _removeAll(arr, fn) {","    var indexsToRemove = [],","        removed = [];","","    arr.forEach(function(value, index) {","        if (fn.apply(this, arguments)) {","            indexsToRemove.unshift(index);","            removed.push(value);","        }","    });","","    indexsToRemove.forEach(function(index){","        removeAtIndex(arr, index);","    });","","    return removed;","}","","/**"," * Remove the all the items from the passed in array"," * that do not {@link Luc#compare match} the passed in object.  Instead of "," * comparing an object an iterator function can be"," * used."," * ","{copyDoc#arrParams}","{copyDoc#arrRemoveAll}"," */","function removeAllNot(arr, obj, config) {","    var fn = _createIteratorNotFn(obj, config);","    return _removeAll(arr, fn);","}","","/**"," * Remove the all the items from the passed in array"," * that {@link Luc#compare matches} the passed in object.  Instead of "," * comparing an object an iterator function can be"," * used."," * ","{copyDoc#arrParams}","{copyDoc#arrRemoveAll}"," */","function removeAll(arr, obj, config) {","    var fn = _createIteratorFn(obj, config);","    return _removeAll(arr, fn);","}","","function _findFirst(arr, fn) {","    var item = false;","    arr.some(function(value, index) {","        if (fn.apply(this, arguments)) {","            item = arr[index];","            return true;","        }","    });","","    return item;","}","","/**"," * Find the first item from the passed in array"," * that does {@link Luc#compare matches} the passed in object.  Instead of "," * comparing an object an iterator function can be"," * used."," * ","{copyDoc#arrParams}","{copyDoc#arrFindSingle}"," */","function findFirst(arr, obj, config) {","    var fn = _createIteratorFn(obj, config);","    return _findFirst(arr, fn);","}","","/**"," * Find the first item from the passed in array"," * that does not {@link Luc#compare match} the passed in object.  Instead of "," * comparing an object an iterator function can be"," * used."," * ","{copyDoc#arrParams}","{copyDoc#arrFindSingle}"," */","function findFirstNot(arr, obj, config) {","    var fn = _createIteratorNotFn(obj, config);","    return _findFirst(arr, fn);","}","","function _findAll(arr, fn) {","    var found = arr.filter(fn);","    return found;","}","","/**"," * Find all of the the items from the passed in array"," * that {@link Luc#compare matches} the passed in object.  Instead of "," * comparing an object an iterator function can be"," * used."," * ","{copyDoc#arrParams}","{copyDoc#arrFindAll}"," */","function findAll(arr, obj, config) {","    var fn = _createIteratorFn(obj, config);","    return _findAll(arr, fn);","}","","/**"," * Find all of the the items from the passed in array"," * that do not {@link Luc#compare match} the passed in object.  Instead of "," * comparing an object an iterator function can be"," * used."," * ","{copyDoc#arrParams}","{copyDoc#arrFindAll}"," */","function findAllNot(arr, obj, config) {","    var fn = _createIteratorNotFn(obj, config);","    return _findAll(arr, fn);","}","","","exports.toArray = toArray;","exports.each = each;","exports.insert = insert;","exports.fromIndex = fromIndex;","exports.last = last;","exports.pluck = pluck;","","exports.removeAtIndex = removeAtIndex;","exports.findFirstNot = findFirstNot;","exports.findAllNot = findAllNot;","exports.findFirst = findFirst;","exports.findAll = findAll;","","exports.removeFirstNot = removeFirstNot;","exports.removeAllNot = removeAllNot;","exports.removeFirst = removeFirst;","exports.removeAll = removeAll;","","(function(){","    var _createLastFn = function(fnName) {","        var lastName = fnName.replace('First', 'Last');","","        exports[lastName] = function(arr, obj, config) {","            var ret;","","            arr.reverse();","            ret = exports[fnName](arr, obj, config);","            arr.reverse();","","            return ret;","        };","","    }, namesToAddLast = ['findFirstNot', 'findFirst', 'removeFirstNot', 'removeFirst'];","","    namesToAddLast.forEach(function(fnName) {","        _createLastFn(fnName);","    });","","}());","","/**"," * @member Luc.Array "," * @method findLastNot "," * Same as Luc.Array.findFirstNot except start at the end."," */","","/**"," * @member Luc.Array "," * @method findLast"," * Same as Luc.Array.findFirst except start at the end."," */","","/**"," * @member Luc.Array "," * @method removeLastNot "," * Same as Luc.Array.removeFirstNot except start at the end."," */","","/**"," * @member Luc.Array "," * @method removeLast "," * Same as Luc.Array.removeFirst except start at the end."," */"];
