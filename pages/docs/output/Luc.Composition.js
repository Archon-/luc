Ext.data.JsonP.Luc_Composition({"tagname":"class","name":"Luc.Composition","extends":null,"mixins":[],"alternateClassNames":[],"aliases":{},"singleton":false,"requires":[],"uses":[],"enum":null,"override":null,"inheritable":null,"inheritdoc":null,"meta":{"private":true},"private":true,"id":"class-Luc.Composition","members":{"cfg":[{"name":"Constructor","tagname":"cfg","owner":"Luc.Composition","meta":{"required":true},"id":"cfg-Constructor"},{"name":"filterKeys","tagname":"cfg","owner":"Luc.Composition","meta":{},"id":"cfg-filterKeys"},{"name":"name","tagname":"cfg","owner":"Luc.Composition","meta":{"required":true},"id":"cfg-name"}],"property":[{"name":"filterFns","tagname":"property","owner":"Luc.Composition","meta":{},"id":"property-filterFns"}],"method":[{"name":"create","tagname":"method","owner":"Luc.Composition","meta":{"protected":true},"id":"method-create"}],"event":[],"css_var":[],"css_mixin":[]},"linenr":6,"files":[{"filename":"composition.js","href":"composition.html#Luc-Composition"}],"html_meta":{"private":null},"statics":{"cfg":[],"property":[],"method":[],"event":[],"css_var":[],"css_mixin":[]},"component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"parentMixins":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/composition.html#Luc-Composition' target='_blank'>composition.js</a></div></pre><div class='doc-contents'><p class='private'><strong>NOTE</strong> This is a private utility class for internal use by the framework. Don't rely on its existence.</p><p>class that wraps $composition config objects\nto conform to an api. The config object\nwill override any protected methods and default configs.</p>\n</div><div class='members'><div class='members-section'><h3 class='members-title icon-cfg'>Config options</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Required Config options</h3><div id='cfg-Constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Composition'>Luc.Composition</span><br/><a href='source/composition.html#Luc-Composition-cfg-Constructor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Composition-cfg-Constructor' class='name expandable'>Constructor</a><span> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a></span><strong class='required signature' >required</strong></div><div class='description'><div class='short'>the Constructor\nto use when creating the composition instance. ...</div><div class='long'><p>the Constructor\nto use when creating the composition instance.  This\nis required if <a href=\"#!/api/Luc.Composition-method-create\" rel=\"Luc.Composition-method-create\" class=\"docClass\">Luc.Composition.create</a> is not overrwitten by\nthe passed in composition config object.</p>\n</div></div></div><div id='cfg-name' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Composition'>Luc.Composition</span><br/><a href='source/composition.html#Luc-Composition-cfg-name' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Composition-cfg-name' class='name not-expandable'>name</a><span> : <a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a></span><strong class='required signature' >required</strong></div><div class='description'><div class='short'><p>the name</p>\n</div><div class='long'><p>the name</p>\n</div></div></div></div><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Optional Config options</h3><div id='cfg-filterKeys' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Composition'>Luc.Composition</span><br/><a href='source/composition.html#Luc-Composition-cfg-filterKeys' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Composition-cfg-filterKeys' class='name expandable'>filterKeys</a><span> : <a href=\"#!/api/Function\" rel=\"Function\" class=\"docClass\">Function</a>/<a href=\"#!/api/String\" rel=\"String\" class=\"docClass\">String</a></span></div><div class='description'><div class='short'>Defaults to Luc.emptyFn. ...</div><div class='long'><p>Defaults to <a href=\"#!/api/Luc-method-emptyFn\" rel=\"Luc-method-emptyFn\" class=\"docClass\">Luc.emptyFn</a>.</p>\n\n<p>If a string is passed and matches a method from</p>\n\n<p><a href=\"#!/api/Luc.Composition-property-filterFns\" rel=\"Luc.Composition-property-filterFns\" class=\"docClass\">Luc.Composition.filterFns</a> it will call that instead.</p>\n\n<p>If a function is defined it\nwill get called while iterating over each key value pair of the\nConstructor's prototype, if a truthy value is\nreturned the property will be added to the defining\nclasses prototype.</p>\n\n<p>For example this config will only expose the emit method\nto the defining class</p>\n\n<pre><code>    $compositions: {\n        Constructor: <a href=\"#!/api/Luc.EventEmitter\" rel=\"Luc.EventEmitter\" class=\"docClass\">Luc.EventEmitter</a>,\n        filterKeys: function(key, value) {\n            return key === 'emit';\n        },\n        name: 'emitter'\n    }\n</code></pre>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-filterFns' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Composition'>Luc.Composition</span><br/><a href='source/composition.html#Luc-Composition-property-filterFns' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Composition-property-filterFns' class='name expandable'>filterFns</a><span> : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></span></div><div class='description'><div class='short'> ...</div><div class='long'>\n<ul><li><span class='pre'>allMethods</span> : <div class='sub-desc'><p>return all methods from the\nconstructors prototype</p>\n</div></li></ul></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-create' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Luc.Composition'>Luc.Composition</span><br/><a href='source/composition.html#Luc-Composition-method-create' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Luc.Composition-method-create' class='name expandable'>create</a>( <span class='pre'></span> ) : <a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a><strong class='protected signature' >protected</strong></div><div class='description'><div class='short'>By default just return a newly created Constructor instance. ...</div><div class='long'><p>By default just return a newly created Constructor instance.</p>\n\n<p>When create is called the following properties can be used :</p>\n\n<p>this.instance The instance that is creating\nthe composition.</p>\n\n<p>this.Constructor the constructor that is passed in from\nthe composition config.</p>\n\n<p>this.instanceArgs the arguments passed into the instance when it\nis being created.  For example</p>\n\n<pre><code>    new MyClassWithAComposition({plugins: []})\n    //inside of the create method\n    this.instanceArgs\n    &gt;[{plugins: []}]\n</code></pre>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Object\" rel=\"Object\" class=\"docClass\">Object</a></span><div class='sub-desc'><p>the composition instance.</p>\n\n<p>For example set the emitters maxListeners\nto what the instance has configed.</p>\n\n<pre><code>    maxListeners: 100,\n    $compositions: {\n        Constructor: <a href=\"#!/api/Luc.EventEmitter\" rel=\"Luc.EventEmitter\" class=\"docClass\">Luc.EventEmitter</a>,\n        create: function() {\n            var emitter = new this.Constructor();\n            emitter.setMaxListeners(this.instance.maxListeners);\n            return emitter;\n        },\n        name: 'emitter'\n    }\n</code></pre>\n</div></li></ul></div></div></div></div></div></div></div>"});